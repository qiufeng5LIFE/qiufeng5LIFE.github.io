<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS实用技巧</title>
    <link href="/2023/02/28/JS%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/02/28/JS%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<ul><li>二位状态匹配</li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Tag</span>&gt;</span>&#123;[&#x27;未开始&#x27;, &#x27;进行中&#x27;, &#x27;已完成&#x27;][detail.projectStatus]&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Tag</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>数组去重</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-literal">true</span>,<span class="hljs-literal">undefined</span>, <span class="hljs-title class_">NaN</span>,<span class="hljs-title class_">NaN</span>]<br><br><span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr))<br><span class="hljs-comment">// 简化写法</span><br><span class="hljs-keyword">const</span> result = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>[arr]]<br></code></pre></td></tr></table></figure><ul><li>获取数组最后一个元素</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> last = arr.<span class="hljs-title function_">at</span>(-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ul><li>数组对象相互转换</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组转对象</span><br><span class="hljs-comment">//// 展开运算符</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-keyword">const</span> obj = &#123;...arr&#125;   <span class="hljs-comment">// &#123;0: &#x27;a&#x27;,1: &#x27;b&#x27;,2: &#x27;c&#x27;&#125;</span><br><span class="hljs-comment">//// object.assign(target,...sources)</span><br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, arr)  <span class="hljs-comment">// &#123;0: &#x27;a&#x27;,1: &#x27;b&#x27;,2: &#x27;c&#x27;&#125;</span><br><span class="hljs-comment">//// forEach</span><br>arr.<span class="hljs-title function_">foreach</span>(<span class="hljs-function">(<span class="hljs-params">item,index</span>) =&gt;</span> &#123;<br>  obj[index] = item<br>&#125;)<br><span class="hljs-comment">//// 键值对转对象</span><br><span class="hljs-keyword">const</span> arr = [[<span class="hljs-string">&#x27;1&#x27;</span>,a],[<span class="hljs-string">&#x27;2&#x27;</span>,b]]<br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">formEntries</span>(arr)  <span class="hljs-comment">// &#123;1: a, 2: b&#125;</span><br><br><span class="hljs-comment">// 对象转数组</span><br><span class="hljs-comment">//// 键值对转数组</span><br><span class="hljs-keyword">const</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<span class="hljs-attr">c</span>: <span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)  <span class="hljs-comment">//  [[&#x27;a&#x27;: 1,&#x27;b&#x27;: 2,&#x27;c&#x27;: 3]]</span><br><br></code></pre></td></tr></table></figure><ul><li>js深拷贝</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">jobs</span>: &#123;<br>        <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;FE&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a))<br>a.<span class="hljs-property">jobs</span>.<span class="hljs-property">first</span> = <span class="hljs-string">&#x27;native&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">jobs</span>.<span class="hljs-property">first</span>) <span class="hljs-comment">// FE</span><br></code></pre></td></tr></table></figure><ul><li>交换两个值</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span>;<br>[a, b] = [b, a]<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">2</span>] = arr[<span class="hljs-number">2</span>], arr[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><ul><li>排序函数 sort()</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 通过回调函数的返回值定义排序规则</span><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> a-b)      <span class="hljs-comment">//数字升序</span><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> a.<span class="hljs-title function_">localeCompare</span>(b))  <span class="hljs-comment">//字母升序</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片测试</title>
    <link href="/2021/06/10/photo/"/>
    <url>/2021/06/10/photo/</url>
    
    <content type="html"><![CDATA[<p>图片引用测试</p><img src="/2021/06/10/photo/test.jpg" class="" title="图片引用方法一">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Boot JPA pom依赖错误记录</title>
    <link href="/2019/05/16/spring-boot-jpa-pom%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/05/16/spring-boot-jpa-pom%E4%BE%9D%E8%B5%96%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/gratisography-skate-face.jpg"></p><p>Spring-Boot中使用JPA做持久层的的时候启动出现报错</p><span id="more"></span><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">控制台- <span class="hljs-number">2019</span><span class="hljs-number">-05</span><span class="hljs-number">-16</span> <span class="hljs-number">17</span><span class="hljs-punctuation">:</span><span class="hljs-number">04</span><span class="hljs-punctuation">:</span><span class="hljs-number">43</span> <span class="hljs-punctuation">[</span>restartedMain<span class="hljs-punctuation">]</span> WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt<span class="hljs-punctuation">:</span> org.springframework.beans.factory.UnsatisfiedDependencyException<span class="hljs-punctuation">:</span> Error creating bean with name &#x27;orderController&#x27;<span class="hljs-punctuation">:</span> Unsatisfied dependency expressed through field &#x27;tokenRepository&#x27;; nested exception is org.springframework.beans.factory.BeanCreationException<span class="hljs-punctuation">:</span> Error creating bean with name &#x27;tokenRepository&#x27;<span class="hljs-punctuation">:</span> Post-processing of merged bean definition failed; nested exception is java.lang.NoClassDefFoundError<span class="hljs-punctuation">:</span> javax/persistence/SynchronizationType<br></code></pre></td></tr></table></figure><p>原因是依赖文件版本冲突引起的，我在pom中引入了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.4.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>spring-boot-starter-data-jpa查看包依赖即可看到依赖的是如下版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.17.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jboss-transaction-api_1.2_spec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jboss.spec.javax.transaction<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而我又在pom中引入了4.1.4.Final，引起了版本冲突，删掉引入的4.1.4.Final版本即可</p>]]></content>
    
    
    <categories>
      
      <category>错误记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>JPA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Boot中的配置文件</title>
    <link href="/2019/05/10/spring-boot%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2019/05/10/spring-boot%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/negative-space.jpg"></p><h5 id="Value"><a href="#Value" class="headerlink" title="@Value()"></a>@Value()</h5><span id="more"></span><ul><li><p>在application.properties配置文件中添加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">drew.email</span>=<span class="hljs-string">lqf05@outllok.com</span><br></code></pre></td></tr></table></figure></li><li><p>在代码中引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;drew.email&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br><br><span class="hljs-meta">@GetMapping(&quot;/env/email&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> email;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h5><ul><li><p>在application.properties配置文件中添加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">redis.host</span>=<span class="hljs-string">127.0.0.1</span><br><span class="hljs-attr">redis.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">redis.pass</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure></li><li><p>新建RedisConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;redis&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@NotEmpty</span><br>    <span class="hljs-keyword">private</span> String host;<br>    <span class="hljs-keyword">private</span> String pass;<br>    <span class="hljs-keyword">private</span> String user;<br><br>&#125;<br><span class="hljs-comment">//@NotEmpty会在项目启动时检查，配置为空时会报错</span><br></code></pre></td></tr></table></figure></li><li><p>在代码中引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisConfig redisConfig;<br><br><span class="hljs-meta">@GetMapping</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getConfig</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> redisConfig;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h5><ul><li><p>在resources下新建drew.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">drew.username</span>=<span class="hljs-string">Andrew</span><br><span class="hljs-attr">drew.nickname</span>=<span class="hljs-string">Drew</span><br></code></pre></td></tr></table></figure></li><li><p>新建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;drew&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:drew.properties&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrewConfig</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String nickname;<br><br>&#125;<br><span class="hljs-comment">//二选一</span><br><span class="hljs-comment">//①可以直接添加@Component--@Component被用在要被自动扫描和装配的类上</span><br><span class="hljs-comment">//②或者在启动类添加@EnableConfigurationProperties(DrewConfig.class)</span><br></code></pre></td></tr></table></figure></li><li><p>在代码中引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DrewConfig drewConfig;<br><br><span class="hljs-meta">@GetMapping(&quot;/drew&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getRedisConfig</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">DrewConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrewConfig</span>();<br>   BeanUtils.copyProperties(drewConfig, config);<br>   <span class="hljs-keyword">return</span> config;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis中使用mysql函数实现子集查询</title>
    <link href="/2019/04/29/mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8mysql%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%AD%90%E9%9B%86%E6%9F%A5%E8%AF%A2/"/>
    <url>/2019/04/29/mybatis%E4%B8%AD%E4%BD%BF%E7%94%A8mysql%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%AD%90%E9%9B%86%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/annie-spratt.jpg"></p><ul><li>实现效果<br> 存在树形分类的项目中，点击左侧的树形分类，会查询出父类和父类所有子类的包含的结果集，之前的项目都是在service层<br> 去做数据查询封装，用mysql函数会大大提升查询效率</li></ul><span id="more"></span><ul><li><p>分类表设计(主要字段)</p><ul><li>id(主键)</li><li>parentId(父级分类id,一级分类约定为0)</li></ul></li><li><p>查询传值</p><ul><li>查询传值parentCategoryId(实际值为分类id,参数名为parentCategoryId)</li></ul></li><li><p>xml查询语句处理</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;parentCategoryId!=null&quot;</span>&gt;</span>And FIND_IN_SET(categoryId,getQuestionCategoryChildLst(#&#123;parentCategoryId&#125;))<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>FIND_IN_SET(needle,haystack)<ul><li>第一个参数needle是要查找的字符串</li><li>第二个参数haystack是要搜索的逗号分隔的字符串列表</li></ul></li><li>FIND_IN_SET()函数根据参数的值返回一个整数或一个NULL值<ul><li>如果needle或haystack为NULL，则函数返回NULL值</li><li>如果needle不在haystack中，或者haystack是空字符串，则返回零</li><li>如果needle在haystack中，则返回一个正整数</li></ul></li><li>getQuestionCategoryChildLst()函数会返回它的子类的所有categoryId的字符串如:(“1,2,3,4”),最终实现的效果是<br>只要表中categoryId在这个字符串中则会返回</li></ul></li><li><p>getQuestionCategoryChildLst(int rootId)</p><ul><li>传参int parentCategoryId</li><li>返回值 varchar</li></ul></li></ul><pre><code class="sql">   CREATE DEFINER=`root`@`%` FUNCTION `getCategoryChildLst`(`rootId` int(11)) RETURNS varchar(1000) CHARSET utf8mb4   BEGIN          DECLARE sTemp VARCHAR(1000);          DECLARE sTempChd VARCHAR(1000);                 SET sTemp = &#39;&#39;;          SET sTempChd =rootId;                 WHILE sTempChd is not null DO              SET sTemp = concat(sTemp,&#39;,&#39;,sTempChd);            SELECT group_concat(id) INTO sTempChd FROM category where FIND_IN_SET(parentId,sTempChd) &gt; 0;      END WHILE;      RETURN concat(sTemp,&#39;,&#39;);    END</code></pre><ul><li>category分类表</li><li>id 分类表的主键</li><li>parentId 分类表父级分类id</li><li>group_concat(id)<br> 会返回category表中id的字符串如(1,2,3,4…)<blockquote><p><a href="https://www.yiibai.com/mysql/find_in_set.html">MySQL的FIND_IN_SET()函数</a><br><a href="https://www.jianshu.com/p/447eb01eebb2">MySQL的GROUP_CONCAT()函数</a></p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在静态方法中使用自定义配置类</title>
    <link href="/2019/04/26/%E5%9C%A8%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E7%B1%BB/"/>
    <url>/2019/04/26/%E5%9C%A8%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/evie-shaffer.jpg"><br><em>已使用阿里云短信服务为例</em></p><span id="more"></span><ul><li>添加pom文件 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>添加配置项 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">alisms:</span><br>  <span class="hljs-attr">REGION_ID:</span> <span class="hljs-string">cn-hangzhou</span><br>  <span class="hljs-attr">ACCESS_KEY:</span> <span class="hljs-string">**************</span><br>  <span class="hljs-attr">SECRET:</span> <span class="hljs-string">***************</span><br></code></pre></td></tr></table></figure></li><li>编写配置类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;alisms&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliyunSmsConfig</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String region_id;<br><br>    <span class="hljs-keyword">private</span> String access_key;<br><br>    <span class="hljs-keyword">private</span> String secret;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建方法类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(AliyunSmsConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliyunSendSms</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliyunSmsConfig smsConfig;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AliyunSendSms infoUtil;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        infoUtil = <span class="hljs-built_in">this</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">(String phone, String sign, String template, String param)</span> &#123;<br>        <span class="hljs-type">DefaultProfile</span> <span class="hljs-variable">profile</span> <span class="hljs-operator">=</span> DefaultProfile.getProfile(infoUtil.smsConfig.getRegion_id(), infoUtil.smsConfig.getAccess_key(), infoUtil.smsConfig.getSecret());<br>        <span class="hljs-type">IAcsClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAcsClient</span>(profile);<br><br>        <span class="hljs-type">CommonRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonRequest</span>();<br>        request.setMethod(MethodType.POST);<br>        request.setDomain(<span class="hljs-string">&quot;dysmsapi.aliyuncs.com&quot;</span>);<br>        request.setVersion(<span class="hljs-string">&quot;2017-05-25&quot;</span>);<br>        request.setAction(<span class="hljs-string">&quot;SendSms&quot;</span>);<br>        request.putQueryParameter(<span class="hljs-string">&quot;PhoneNumbers&quot;</span>, phone);<br>        request.putQueryParameter(<span class="hljs-string">&quot;SignName&quot;</span>, sign);<br>        request.putQueryParameter(<span class="hljs-string">&quot;TemplateCode&quot;</span>, template);<br>        request.putQueryParameter(<span class="hljs-string">&quot;TemplateParam&quot;</span>, param);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">CommonResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.getCommonResponse(request);<br>            System.out.println(response.getData());<br>        &#125; <span class="hljs-keyword">catch</span> (ServerException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure> <strong>主要是@PostConstruct注解的使用</strong></li><li>@PostConstruct注解介绍<br> <a href="https://blog.csdn.net/wo541075754/article/details/52174900">注解@PostConstruct与@PreDestroy详解及实例</a><blockquote><p>PostConstruct 注释用于在依赖关系注入完成之后需要执行的方法上，以执行任何初始化。此方法必须在将类放入服务之前调用。支持依赖关系注入的所有类都必须支持此注释。即使类没有请求注入任何资源，用 PostConstruct 注释的方法也必须被调用。只有一个方法可以用此注释进行注释。应用 PostConstruct 注释的方法必须遵守以下所有标准：该方法不得有任何参数，除非是在 EJB 拦截器 (interceptor) 的情况下，根据 EJB 规范的定义，在这种情况下它将带有一个 InvocationContext 对象 ；该方法的返回类型必须为 void；该方法不得抛出已检查异常；应用 PostConstruct 的方法可以是 public、protected、package private 或 private；除了应用程序客户端之外，该方法不能是 static；该方法可以是 final；如果该方法抛出未检查异常，那么不得将类放入服务中，除非是能够处理异常并可从中恢复的 EJB。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Game of Thrones (season 8)</title>
    <link href="/2019/04/12/Game-of-Thrones-season-8/"/>
    <url>/2019/04/12/Game-of-Thrones-season-8/</url>
    
    <content type="html"><![CDATA[<hr><p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/power.jpg" alt="明日回归" title="明日回归"></p><hr>]]></content>
    
    
    <categories>
      
      <category>碎碎念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>drew life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot Excel map数据的导入导出</title>
    <link href="/2019/02/20/spring-boot-Excel-map%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <url>/2019/02/20/spring-boot-Excel-map%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/hands.jpg"></p><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.afterturn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easypoi-base<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.afterturn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easypoi-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.afterturn<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easypoi-annotation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="导出-构建导出的对象"><a href="#导出-构建导出的对象" class="headerlink" title="导出 构建导出的对象"></a>导出 构建导出的对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;ExcelExportEntity&gt; entity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ExcelExportEntity&gt;();<br><span class="hljs-comment">//构造对象等同于@Excel</span><br><span class="hljs-type">ExcelExportEntity</span> <span class="hljs-variable">excelentity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExcelExportEntity</span>(<span class="hljs-string">&quot;学号&quot;</span>, <span class="hljs-string">&quot;card&quot;</span>);<br><span class="hljs-comment">//设置不需要合并</span><br>excelentity.setNeedMerge(<span class="hljs-literal">false</span>);<br>excelentity.setWidth(<span class="hljs-number">20</span>);<br>entity.add(excelentity);<br><span class="hljs-comment">//一个excelentity代表一列  可以添加多个 </span><br><span class="hljs-comment">// 还可在一个excelentity嵌套一个excelentity（实现表格嵌套）</span><br><br><span class="hljs-comment">//填充数据</span><br>List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Map&lt;String, Object&gt;&gt;();<br><span class="hljs-comment">//从数据库获得cardList 循环插入</span><br><span class="hljs-keyword">for</span> (String card : cardIdList) &#123;<br>    <span class="hljs-comment">//写入卡号</span><br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;cardId&quot;</span>, cardId);<br>    list.add(map);<br>&#125;<br><br><span class="hljs-comment">//把我们构造好的bean对象放到params就可以了</span><br><span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExcelExportUtil.exportExcel(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExportParams</span>(<span class="hljs-string">&quot;表标题&quot;</span>, <span class="hljs-string">&quot;sheet1&quot;</span>), entity, list);<br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;学号表.xls&quot;</span>;<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fileName);<br>workbook.write(fos);<br>fos.close();<br><span class="hljs-comment">//此函数主要实现可以在浏览器中实现弹出下载（可感知）</span><br><span class="hljs-built_in">this</span>.buildExcelDocument(fileName, workbook, response);<br></code></pre></td></tr></table></figure><ul><li>buildExcelDocument函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildExcelDocument</span><span class="hljs-params">(String filename, Workbook workbook, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>   response.setContentType(<span class="hljs-string">&quot;application/vnd.ms-excel&quot;</span>);<br>   response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>   <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>   workbook.write(outputStream);<br>   outputStream.flush();<br>   outputStream.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="map导入"><a href="#map导入" class="headerlink" title="map导入"></a>map导入</h5><ul><li>将MultipartFile 转成 File<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// input 上传文件一般是将MultipartFile  而处理上传文件需要的是File格式 </span><br><span class="hljs-keyword">private</span> File <span class="hljs-title function_">convertFile</span><span class="hljs-params">(MultipartFile file)</span><br>    &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">convFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file.getOriginalFilename());<br>            convFile.createNewFile();<br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(convFile);<br>            fos.write(file.getBytes());<br>            fos.close();<br>            <span class="hljs-keyword">return</span> convFile;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestException</span>(e.getMessage());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li>获得上传数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Map&lt;String, Object&gt;&gt; list = ExcelImportUtil.importExcel(convertFile(multipartFile), Map.class, params);<br><span class="hljs-comment">//遍历数据</span><br><span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; map : list) &#123;<br>    <span class="hljs-comment">//遍历map</span><br>     Set&lt;Map.Entry&lt;String, Object&gt;&gt; entries = map.entrySet();<br>     <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entries) &#123;<br>     <span class="hljs-comment">// map key value</span><br>     System.out.println(entry.getKey()+<span class="hljs-string">&quot;:&quot;</span>+entry.getValue());<br>     <span class="hljs-comment">//将数据添加至数据库</span><br>    &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>使用<a href="http://easypoi.mydoc.io/">EasyPoi</a>插件</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker swarm 集群部署wordpress</title>
    <link href="/2018/12/27/docker-swarm-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2wordpress/"/>
    <url>/2018/12/27/docker-swarm-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2wordpress/</url>
    
    <content type="html"><![CDATA[<p><img src="http://drewlife.oss-cn-shanghai.aliyuncs.com/%E7%91%9E%E7%A7%8B.jpg"></p><h5 id="测试环境说明"><a href="#测试环境说明" class="headerlink" title="测试环境说明"></a>测试环境说明</h5><span id="more"></span><p>测试环境基于VirtualBox和Vagrant搭建，可根据如下Vagrantfile文件构建环境</p><ul><li>创建Vagrantfile文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>Vagrant.require_version <span class="hljs-string">&quot;&gt;= 1.6.0&quot;</span><br><br>boxes = [<br>    &#123;<br>        :name =&gt; <span class="hljs-string">&quot;swarm-manager&quot;</span>,<br>        :eth1 =&gt; <span class="hljs-string">&quot;192.168.205.10&quot;</span>,<br>        :mem =&gt; <span class="hljs-string">&quot;1024&quot;</span>,<br>        :cpu =&gt; <span class="hljs-string">&quot;1&quot;</span><br>    &#125;,<br>    &#123;<br>        :name =&gt; <span class="hljs-string">&quot;swarm-worker1&quot;</span>,<br>        :eth1 =&gt; <span class="hljs-string">&quot;192.168.205.11&quot;</span>,<br>        :mem =&gt; <span class="hljs-string">&quot;1024&quot;</span>,<br>        :cpu =&gt; <span class="hljs-string">&quot;1&quot;</span><br>    &#125;,<br>    &#123;<br>        :name =&gt; <span class="hljs-string">&quot;swarm-worker2&quot;</span>,<br>        :eth1 =&gt; <span class="hljs-string">&quot;192.168.205.12&quot;</span>,<br>        :mem =&gt; <span class="hljs-string">&quot;1024&quot;</span>,<br>        :cpu =&gt; <span class="hljs-string">&quot;1&quot;</span><br>    &#125;<br>]<br><br>Vagrant.configure(2) <span class="hljs-keyword">do</span> |config|<br><br>  config.vm.box = <span class="hljs-string">&quot;centos/7&quot;</span><br><br>  boxes.each <span class="hljs-keyword">do</span> |opts|<br>      config.vm.define opts[:name] <span class="hljs-keyword">do</span> |config|<br>        config.vm.hostname = opts[:name]<br>        config.vm.provider <span class="hljs-string">&quot;vmware_fusion&quot;</span> <span class="hljs-keyword">do</span> |v|<br>          v.vmx[<span class="hljs-string">&quot;memsize&quot;</span>] = opts[:mem]<br>          v.vmx[<span class="hljs-string">&quot;numvcpus&quot;</span>] = opts[:cpu]<br>        end<br><br>        config.vm.provider <span class="hljs-string">&quot;virtualbox&quot;</span> <span class="hljs-keyword">do</span> |v|<br>          v.customize [<span class="hljs-string">&quot;modifyvm&quot;</span>, :<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;--memory&quot;</span>, opts[:mem]]<br>          v.customize [<span class="hljs-string">&quot;modifyvm&quot;</span>, :<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;--cpus&quot;</span>, opts[:cpu]]<br>        end<br><br>        config.vm.network :private_network, ip: opts[:eth1]<br>      end<br>  end<br><br>  config.vm.provision <span class="hljs-string">&quot;shell&quot;</span>, privileged: <span class="hljs-literal">true</span>, path: <span class="hljs-string">&quot;./setup.sh&quot;</span><br><br>end<br></code></pre></td></tr></table></figure><ul><li>setup.sh文件（用于在虚拟机中安装docker环境）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><br><span class="hljs-comment"># install some tools</span><br>sudo yum install -y git vim gcc glibc-static telnet bridge-utils<br><br><span class="hljs-comment"># install docker</span><br>curl -fsSL get.docker.com -o get-docker.sh<br>sh get-docker.sh<br><br><span class="hljs-comment"># start docker service</span><br>sudo groupadd docker<br>sudo gpasswd -a vagrant docker<br>sudo systemctl start docker<br><br><span class="hljs-built_in">rm</span> -rf get-docker.sh<br></code></pre></td></tr></table></figure><ul><li>确保安装VirtualBox和Vagrant，在当前目录下执行vagrant up（可能需要一段时间）</li><li>vagrant status 查看状态<br> 会创建swarm-manager、swarm-worker1、swarm-worker2三个虚拟机</li><li>进入虚拟机</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>vagrant ssh swarm-manager<br></code></pre></td></tr></table></figure><h5 id="创建manager节点"><a href="#创建manager节点" class="headerlink" title="创建manager节点"></a>创建manager节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入swarm-manager执行</span><br>$ docker swarm init --advertise-addr=192.168.0.11<br><span class="hljs-comment"># ip换成自己虚拟机的IP  执行 ip a 可查看</span><br></code></pre></td></tr></table></figure><h5 id="创建worker节点"><a href="#创建worker节点" class="headerlink" title="创建worker节点"></a>创建worker节点</h5><ul><li>创建manager节点，之后会输出加入加入manager节点的命令 如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 分别进入swarm-worker1、swarm-worker2虚拟机执行 注意换成自己的</span><br>$ docker swarm <span class="hljs-built_in">join</span> --token SWMTKN-1-0nr8bllbsbwxp7kbopyfd3zibvs1jpq1f1hskjaektyevs0d87-6nfkla17lljk06nmd8t5vhjdm 192.168.0.11:2377<br></code></pre></td></tr></table></figure></li><li>在manager节点查看节点状态</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ docker <span class="hljs-keyword">node</span> <span class="hljs-title">ls</span><br></code></pre></td></tr></table></figure><h5 id="创建overlay网络"><a href="#创建overlay网络" class="headerlink" title="创建overlay网络"></a>创建overlay网络</h5><ul><li>在manager节点执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker network create -d overlay press<br><span class="hljs-comment"># 查看</span><br>$ docker network <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="创建mysql-service"><a href="#创建mysql-service" class="headerlink" title="创建mysql service"></a>创建mysql service</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在manager节点执行</span><br>$ docker service create --name mysql --<span class="hljs-built_in">env</span> MYSQL_ROOT_PASSWORD=root --<span class="hljs-built_in">env</span> MYSQL_DATABASE=wordpress --network press --mount <span class="hljs-built_in">type</span>=volume,<span class="hljs-built_in">source</span>=mysql-data,destination=/var/lib/mysql mysql:5.7<br><span class="hljs-comment"># --network press 指定为刚才创建的网络</span><br><span class="hljs-comment"># 查看service</span><br>$ docker service <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 3z8gl8svu4zg        mysql               replicated          1/1                 mysql:5.7</span><br><span class="hljs-comment"># 查看service详情</span><br>$ docker service ps mysql<br><span class="hljs-comment"># 8j5hwwp8j121        mysql.1             mysql:5.7           swarm-worker2               Running             Running 2 hours ago</span><br><span class="hljs-comment"># 依据swarm-worker2 可知mysql创建在swarm-worker2节点</span><br><span class="hljs-comment"># 在swarm-worker2节点查看</span><br>$ docker ps<br><span class="hljs-comment"># d8fe5bbb84da        mysql:5.7           &quot;docker-entrypoint.s…&quot;   2 hours ago         Up 2 hours          3306/tcp, 33060/tcp   mysql.1.8j5hwwp8j121atr7ryn53y21h</span><br></code></pre></td></tr></table></figure><h5 id="创建wordpress-service"><a href="#创建wordpress-service" class="headerlink" title="创建wordpress service"></a>创建wordpress service</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在manager节点执行</span><br>$ docker service create --name wordpress -p 80:80 --<span class="hljs-built_in">env</span> WORDPRESS_DB_PASSWORD=root --<span class="hljs-built_in">env</span> WORDPRESS_DB_HOST=mysql --network demo wordpress<br><span class="hljs-comment"># docker service ls 查看</span><br></code></pre></td></tr></table></figure><ul><li>创建成功后用三个虚拟机的ip都可以访问，mysql和wordpress service都可以横向扩展<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 横向扩展wordpress</span><br>$ docker service scale wordpress=5<br><span class="hljs-comment"># 即可将wordpress service增加至5个</span><br>$ docker service <span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 9kab4c4finog        wordpress           replicated          5/5                 wordpress:latest        *:80-&gt;80/tcp</span><br><span class="hljs-comment"># 可以看到已经增加至5个</span><br>$ docker service ps wordpress<br><span class="hljs-comment"># 可以看到wordpress 分布在不同的节点中</span><br><span class="hljs-comment"># 如果有一个节点服务当掉都会自动重启一个，保持服务总数不变</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Docker Swarm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>centos用docker-compose部署前後端分離項目</title>
    <link href="/2018/12/26/centos%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%89%8D%E5%BE%8C%E7%AB%AF%E5%88%86%E9%9B%A2%E9%A0%85%E7%9B%AE/"/>
    <url>/2018/12/26/centos%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%89%8D%E5%BE%8C%E7%AB%AF%E5%88%86%E9%9B%A2%E9%A0%85%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/frandmusic.jpg"></p><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo yum remove docker \<br>                 docker-client \<br>                 docker-client-latest \<br>                 docker-common \<br>                 docker-latest \<br>                 docker-latest-logrotate \<br>                 docker-logrotate \<br>                 docker-selinux \<br>                 docker-engine-selinux \<br>                 docker-engine<br>$ sudo yum install -y yum-utils \<br>      device-mapper-persistent-data \<br>      lvm2<br>$ sudo yum-config-manager \<br>         --add-repo \<br>         https://download.docker.com/linux/centos/docker-ce.repo<br>$ sudo yum install docker-ce<br>$ sudo systemctl start docker<br></code></pre></td></tr></table></figure><h5 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.23.1/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br>$ sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br>$ docker-compose --version<br></code></pre></td></tr></table></figure><h5 id="docker-compose-yml配置文件"><a href="#docker-compose-yml配置文件" class="headerlink" title="docker-compose.yml配置文件"></a>docker-compose.yml配置文件</h5> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">DB:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span><br>  <span class="hljs-attr">ports:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>  <span class="hljs-attr">volumes:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">./db/my.cnf:/etc/mysql/my.cnf</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">./db/data:/var/lib/mysql</span><br>  <span class="hljs-attr">environment:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=123456</span><br><span class="hljs-attr">Cache:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">redis:3.2</span><br>  <span class="hljs-attr">ports:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./cache/redis.conf:/usr/local/etc/redis/redis.conf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./cache/data:/data</span><br>  <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">/usr/local/etc/redis/redis.conf</span> <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span>  <span class="hljs-string">--requirepass</span> <span class="hljs-string">mypass</span><br><span class="hljs-attr">Tomcat1:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">hub.c.163.com/hcwilliam/tomcat-docker:latest</span><br>  <span class="hljs-attr">links:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Cache:Cache</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">DB:DB</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./logs/tomcat1:/opt/tomcat9/logs</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./tomcat-root1:/opt/tomcat9/webapps/ROOT</span><br><span class="hljs-attr">Tomcat2:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">hub.c.163.com/hcwilliam/tomcat-docker:latest</span><br>  <span class="hljs-attr">links:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Cache:Cache</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">DB:DB</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8081:8080&quot;</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./logs/tomcat2:/opt/tomcat9/logs</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./tomcat-root2:/opt/tomcat9/webapps/ROOT</span><br><span class="hljs-attr">Web:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/nginx:latest</span><br>  <span class="hljs-attr">links:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Cache:Cache</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Tomcat1:Tomcat1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Tomcat2:Tomcat2</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br>  <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./conf:/etc/nginx/conf.d</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./cert:/etc/nginx/cert/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./logs/nginx:/etc/nginx/logs/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx-root:/opt/nginx-root</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx.conf:/etc/nginx/nginx.conf</span><br></code></pre></td></tr></table></figure><h5 id="两个nginx配置文件"><a href="#两个nginx配置文件" class="headerlink" title="两个nginx配置文件"></a>两个nginx配置文件</h5><ul><li>.&#x2F;conf下的web.conf配置文件，配置443.端口代理<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">listen</span>      <span class="hljs-string">80;</span><br>        <span class="hljs-attr">server_name</span> <span class="hljs-string">sales.bebeplus.cn;</span><br>        <span class="hljs-attr">rewrite</span> <span class="hljs-string">^(.*)$ https://$&#123;server_name&#125;$1 permanent;</span><br>     <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">listen</span>       <span class="hljs-string">443;</span><br>        <span class="hljs-attr">server_name</span>  <span class="hljs-string">sales.bebeplus.cn;</span><br>        <span class="hljs-attr">ssl</span> <span class="hljs-string">on;</span><br>        <span class="hljs-attr">ssl_certificate</span> <span class="hljs-string">/etc/nginx/cert/1660878_xxxxxxxx.pem;</span><br>        <span class="hljs-attr">ssl_certificate_key</span> <span class="hljs-string">/etc/nginx/cert/1660878_xxxxxx.key;</span><br>        <span class="hljs-attr">ssl_session_timeout</span> <span class="hljs-string">5m;</span><br>        <span class="hljs-attr">ssl_ciphers</span> <span class="hljs-string">ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br>        <span class="hljs-attr">ssl_protocols</span> <span class="hljs-string">TLSv1 TLSv1.1 TLSv1.2;</span><br>        <span class="hljs-attr">ssl_prefer_server_ciphers</span> <span class="hljs-string">on;</span><br><br>        <span class="hljs-attr">location</span> <span class="hljs-string">/&#123;</span><br>             <span class="hljs-attr">root</span>    <span class="hljs-string">/opt/nginx-root;</span><br>             <span class="hljs-attr">index</span>  <span class="hljs-string">index.html index.htm index.php;</span><br>         <span class="hljs-attr">&#125;</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">/api &#123;</span><br>             <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">http://multi-web/api;</span><br>        <span class="hljs-attr">&#125;</span><br>     <span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure></li><li>.&#x2F;nginx.conf，配置负载均衡<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">worker_processes</span>  <span class="hljs-string">4;</span><br><span class="hljs-attr">worker_rlimit_nofile</span> <span class="hljs-string">65535;</span><br><span class="hljs-attr">user</span> <span class="hljs-string">root root;</span><br><br><span class="hljs-attr">events</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">use</span> <span class="hljs-string">epoll;</span><br>    <span class="hljs-attr">worker_connections</span>  <span class="hljs-string">65535;</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr">http</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">include</span>       <span class="hljs-string">mime.types;</span><br>    <span class="hljs-attr">default_type</span>  <span class="hljs-string">application/octet-stream;</span><br>    <span class="hljs-attr">server_tokens</span> <span class="hljs-string">off;</span><br><br>    <span class="hljs-attr">log_format</span>  <span class="hljs-string">main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                      <span class="hljs-attr">&#x27;$status</span> <span class="hljs-string">$body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                      <span class="hljs-attr">&#x27;&quot;$http_user_agent&quot;</span> <span class="hljs-string">&quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-attr">access_log</span>  <span class="hljs-string">logs/access.log  main;</span><br><br>    <span class="hljs-attr">sendfile</span>        <span class="hljs-string">on;</span><br>    <span class="hljs-attr">keepalive_timeout</span>  <span class="hljs-string">60;</span><br>    <span class="hljs-attr">client_header_buffer_size</span>    <span class="hljs-string">128k;</span><br>    <span class="hljs-attr">large_client_header_buffers</span>  <span class="hljs-string">4 128k;</span><br>    <span class="hljs-attr">fastcgi_intercept_errors</span> <span class="hljs-string">on;</span><br>    <span class="hljs-attr">client_max_body_size</span> <span class="hljs-string">1024m;</span><br><span class="hljs-comment">    #proxy_send_timeout 7200;</span><br>    <span class="hljs-attr">proxy_read_timeout</span>  <span class="hljs-string">7200;</span><br>    <span class="hljs-attr">upstream</span>  <span class="hljs-string">multi-web &#123;</span><br>        <span class="hljs-attr">hash</span> <span class="hljs-string">$request_uri;</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">Tomcat1:8080 weight=4; #tomcat 1</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">Tomcat2:8080 weight=4; #tomcat 2</span><br>    <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">include</span> <span class="hljs-string">conf.d/*.conf;</span><br>    <span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">server_name</span> <span class="hljs-string">_;</span><br>        <span class="hljs-attr">return</span> <span class="hljs-string">404;</span><br><span class="hljs-comment">        #access_log on;</span><br>       <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Docker Compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬蟲框架Scrapy的學習--爬取豆瓣電影排行榜</title>
    <link href="/2018/10/16/%E7%88%AC%E8%9F%B2%E6%A1%86%E6%9E%B6Scrapy%E7%9A%84%E5%AD%B8%E7%BF%92-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E9%9B%BB%E5%BD%B1%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    <url>/2018/10/16/%E7%88%AC%E8%9F%B2%E6%A1%86%E6%9E%B6Scrapy%E7%9A%84%E5%AD%B8%E7%BF%92-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E9%9B%BB%E5%BD%B1%E6%8E%92%E8%A1%8C%E6%A6%9C/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/lishangan.jpg"></p><h5 id="运行环境准备（Windows-10）"><a href="#运行环境准备（Windows-10）" class="headerlink" title="运行环境准备（Windows 10）"></a>运行环境准备（Windows 10）</h5><span id="more"></span><ul><li>安装python环境，直接在python.org官网下载相应的版本，注意安装时勾选安装pip选项，勾选添加环境变量</li><li>环境校验  在cmd中执行</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment"># λ 是我本地cmd标识</span><br>λ python -V<br>Python <span class="hljs-number">3.7</span>.<span class="hljs-number">0</span><br><span class="hljs-comment"># 如果安装的是python 2.x版本 执行  pip -V, </span><br><span class="hljs-comment"># python 3.x 执行 pip3 -V</span><br>λ pip3 -V<br>pip <span class="hljs-number">18.1</span> <span class="hljs-keyword">from</span> f:<span class="hljs-string">\python\lib\site-packages\pip</span> (python <span class="hljs-number">3.7</span>)<br><span class="hljs-comment"># 若不能正常返回 首先检验是否添加了环境变量，确保安装时勾选pip模块</span><br></code></pre></td></tr></table></figure><ul><li>安装scrapy框架</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> scrapy<br></code></pre></td></tr></table></figure><ul><li>如果报 Microsoft Visual C++ 14.0 is required 安装错误</li></ul><ol><li>到<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">teisted</a>网站下载自己相应版本的whl文件<br>cp后面是python版本，amd64代表64位,注意自己安装的python是32位的还是64位的</li><li>cmd切换到下载的whl文件目录执行<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">pip3</span> <span class="hljs-string">install Twisted‑18.9.0‑cp37‑cp37m‑win32.whl</span><br></code></pre></td></tr></table></figure></li><li>再次执行 pip3 install scrapy</li></ol><ul><li>查看scrapy安装是否正常<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">λ</span> <span class="hljs-string">scrapy -V</span><br><span class="hljs-attr">Scrapy</span> <span class="hljs-string">1.5.1 - no active project</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">scrapy</span> <span class="hljs-string">startproject douban</span><br><span class="hljs-comment"># cmd进入spriders目录生成spider文件</span><br><span class="hljs-attr">scrapy</span> <span class="hljs-string">genspider douban_spider movie.douban.com</span><br><span class="hljs-comment"># movie.douban.com 是要抓取网站的域名</span><br></code></pre></td></tr></table></figure><h5 id="定义抓取目标"><a href="#定义抓取目标" class="headerlink" title="定义抓取目标"></a>定义抓取目标</h5><p>在items.py中定义一下内容</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubanItem</span>(scrapy.Item):<br>    <span class="hljs-comment"># define the fields for your item here like:</span><br>    <span class="hljs-comment"># name = scrapy.Field()</span><br>    <span class="hljs-comment"># 序号</span><br>    serial_number = scrapy.Field()<br>    <span class="hljs-comment"># 电影名称</span><br>    movie_name = scrapy.Field()<br>    <span class="hljs-comment"># 電影介紹</span><br>    introduce = scrapy.Field()<br>    <span class="hljs-comment"># 星级</span><br>    star = scrapy.Field()<br>    <span class="hljs-comment"># 评论数</span><br>    evaluate = scrapy.Field()<br>    <span class="hljs-comment"># 电影描述</span><br>    describe = scrapy.Field()<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h5 id="爬虫文件的编写-douban-spider-py"><a href="#爬虫文件的编写-douban-spider-py" class="headerlink" title="爬虫文件的编写 douban_spider.py"></a>爬虫文件的编写 douban_spider.py</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">from</span> douban.items <span class="hljs-keyword">import</span> DoubanItem<br><br><span class="hljs-comment"># 注意头部引用定义的item</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubanSpiderSpider</span>(scrapy.Spider):<br>    <span class="hljs-comment"># 爬虫名</span><br>    name = <span class="hljs-string">&#x27;douban_spider&#x27;</span><br>    <span class="hljs-comment"># 允许的域名</span><br>    allowed_domains = [<span class="hljs-string">&#x27;movie.douban.com&#x27;</span>]<br>    <span class="hljs-comment"># 入口url</span><br>    start_urls = [<span class="hljs-string">&#x27;https://movie.douban.com/top250&#x27;</span>]<br><br><br>    <span class="hljs-comment"># 默认的解析方法</span><br>    <span class="hljs-comment"># 其中最主要的是xapth规则</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        move_list = response.xpath(<span class="hljs-string">&quot;//div[@class=&#x27;article&#x27;]//ol[@class=&#x27;grid_view&#x27;]//li&quot;</span>)<br>        <span class="hljs-keyword">for</span> i_item <span class="hljs-keyword">in</span> move_list:<br>            douban_item = DoubanItem()<br>            douban_item[<span class="hljs-string">&#x27;serial_number&#x27;</span>] = i_item.xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;item&#x27;]//em/text()&quot;</span>).extract_first()<br>            <span class="hljs-comment"># extract_first() 拿到第一个数据</span><br>            <span class="hljs-comment"># 注意循环内的xpath规则头部的 . ，他表示此xapth规则会拼接在循环外的xpath规则之后</span><br>            douban_item[<span class="hljs-string">&#x27;movie_name&#x27;</span>] = i_item.xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;info&#x27;]//div[@class=&#x27;hd&#x27;]//a//span[1]/text()&quot;</span>).extract_first()<br>            content =  i_item.xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;info&#x27;]//div[@class=&#x27;bd&#x27;]//p[1]/text()&quot;</span>).extract()<br>            <span class="hljs-comment"># 拿到的数据带有空格和换行，处理掉这些空格</span><br>            <span class="hljs-keyword">for</span> i_content <span class="hljs-keyword">in</span> content:<br>                content_s = <span class="hljs-string">&quot;&quot;</span>.join(i_content.split())<br>                douban_item[<span class="hljs-string">&#x27;introduce&#x27;</span>] = content_s<br>            douban_item[<span class="hljs-string">&#x27;star&#x27;</span>] = i_item.xpath(<span class="hljs-string">&quot;.//span[@class=&#x27;rating_num&#x27;]//text()&quot;</span>).extract_first()<br>            douban_item[<span class="hljs-string">&#x27;evaluate&#x27;</span>] = i_item.xpath(<span class="hljs-string">&quot;.//div[@class=&#x27;star&#x27;]//span[4]/text()&quot;</span>).extract_first()<br>            douban_item[<span class="hljs-string">&#x27;describe&#x27;</span>] = i_item.xpath(<span class="hljs-string">&quot;.//p[@class=&#x27;quote&#x27;]//span/text()&quot;</span>).extract_first()<br>            <span class="hljs-keyword">yield</span> douban_item<br>        <span class="hljs-comment"># 解析下一页规则</span><br>        next_link = response.xpath(<span class="hljs-string">&quot;//span[@class=&#x27;next&#x27;]/link/@href&quot;</span>).extract()<br>        <span class="hljs-keyword">if</span> next_link:<br>            next_link = next_link[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">yield</span> scrapy.Request(<span class="hljs-string">&quot;https://movie.douban.com/top250&quot;</span> + next_link,callback=self.parse)<br><br></code></pre></td></tr></table></figure><h5 id="user-agent设置"><a href="#user-agent设置" class="headerlink" title="user-agent设置"></a>user-agent设置</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># seetings.py中打开注释  设置user-agent</span><br><span class="hljs-attr">USER_AGENT</span> = <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="创建执行文件"><a href="#创建执行文件" class="headerlink" title="创建执行文件"></a>创建执行文件</h5><p>在seetings.py同级目录下创建mian.py文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">from</span> <span class="hljs-string">scrapy import cmdline</span><br><span class="hljs-attr">cmdline.execute(&#x27;scrapy</span> <span class="hljs-string">crawl douban_spider&#x27;.split())</span><br></code></pre></td></tr></table></figure><h5 id="执行爬虫项目"><a href="#执行爬虫项目" class="headerlink" title="执行爬虫项目"></a>执行爬虫项目</h5><ul><li><p>直接执行mian.py文件</p></li><li><p>在cmd执行</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">scrapy</span> <span class="hljs-string">crawl douabn_spider</span><br><span class="hljs-comment"># 正常会输出爬虫信息和解析后的爬去文件 如：</span><br><span class="hljs-attr">...</span><br><span class="hljs-attr">2018-10-16</span> <span class="hljs-string">14:29:53 [scrapy.core.scraper] DEBUG: Scraped from &lt;200 https://movie.douban.com/top250?start=225&amp;filter=&gt;</span><br><span class="hljs-attr">&#123;&#x27;describe&#x27;</span>: <span class="hljs-string">&#x27;青春的窃窃私语。 &#x27;,</span><br> <span class="hljs-attr">&#x27;evaluate&#x27;</span>: <span class="hljs-string">&#x27;292506人评价&#x27;,</span><br> <span class="hljs-attr">&#x27;introduce&#x27;</span>: <span class="hljs-string">&#x27;2002/台湾法国/剧情爱情同性&#x27;,</span><br> <span class="hljs-attr">&#x27;movie_name&#x27;</span>: <span class="hljs-string">&#x27;蓝色大门&#x27;,</span><br> <span class="hljs-attr">&#x27;serial_number&#x27;</span>: <span class="hljs-string">&#x27;250&#x27;,</span><br> <span class="hljs-attr">&#x27;star&#x27;</span>: <span class="hljs-string">&#x27;8.3&#x27;&#125;</span><br><span class="hljs-attr">2018-10-16</span> <span class="hljs-string">14:29:53 [scrapy.core.engine] INFO: Closing spider (finished)</span><br><span class="hljs-attr">...</span><br><br></code></pre></td></tr></table></figure><h5 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#在cmd执行 注意一定要在项目目录</span><br><span class="hljs-attr">scrapy</span> <span class="hljs-string">crawl douabn_spider -o douban.json</span><br><span class="hljs-attr">scrapy</span> <span class="hljs-string">crawl douabn_spider -o douban.csv</span><br><span class="hljs-comment">#csv格式打开可能出现乱码，可先用编辑器打开将编码格式改为UTF-8-BOM</span><br></code></pre></td></tr></table></figure><h5 id="保存到MongoDB中"><a href="#保存到MongoDB中" class="headerlink" title="保存到MongoDB中"></a>保存到MongoDB中</h5><ul><li><p>在seetings.py中定义数据库连接变量</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mongo_host</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br><span class="hljs-attr">mongoo_port</span> = <span class="hljs-string">27017</span><br><span class="hljs-attr">mongo_db_name</span> = <span class="hljs-string">&#x27;douban&#x27;</span><br><span class="hljs-attr">mongo_db_collection</span> = <span class="hljs-string">&#x27;douban_movie&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>在pipelines.py中编写导入代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> pymongo<br><span class="hljs-keyword">from</span> douban.settings <span class="hljs-keyword">import</span> mongo_host,mongo_db_name,mongoo_port,mongo_db_collection<br><span class="hljs-comment">#导入定义的数据库连接变量</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubanPipeline</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        host = mongo_host<br>        port = mongoo_port<br>        dbname = mongo_db_name<br>        sheetname = mongo_db_collection<br>        client = pymongo.MongoClient(host=host,port=port)<br>        mydb = client[dbname]<br>        self.post=mydb[sheetname]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        data = <span class="hljs-built_in">dict</span>(item)<br>        self.post.insert(data)<br>        <span class="hljs-keyword">return</span> item<br>        <br><span class="hljs-comment"># 环境中pymongo不存在时安装即可  pip3 install pymongo</span><br></code></pre></td></tr></table></figure></li><li><p>在seetings.py中开启pipelines</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 只有开启此选项数据才会保存到数据库</span><br>ITEM_PIPELINES = &#123;<br>   <span class="hljs-string">&#x27;douban.pipelines.DoubanPipeline&#x27;</span>: <span class="hljs-number">300</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="保存到mysql中"><a href="#保存到mysql中" class="headerlink" title="保存到mysql中"></a>保存到mysql中</h5><ul><li>在seetings.py中定义数据库连接变量<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mysql_host</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br><span class="hljs-attr">mysql_port</span> = <span class="hljs-string">3306</span><br><span class="hljs-attr">mysql_db_name</span> = <span class="hljs-string">&#x27;douban&#x27;</span><br><span class="hljs-attr">mysql_user</span> = <span class="hljs-string">&#x27;root&#x27;</span><br><span class="hljs-attr">mysql_passwd</span> = <span class="hljs-string">&#x27;root&#x27;</span><br><br></code></pre></td></tr></table></figure></li><li>在pipelines.py中编写导入代码<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pymysql.cursors<br><span class="hljs-keyword">from</span> douban.settings <span class="hljs-keyword">import</span> mysql_db_name,mysql_host,mysql_passwd,mysql_port,mysql_user<br><span class="hljs-comment"># pymysql 模块不存在安装即可 pip3 install pymysql</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MysqlPipeline</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.connect = pymysql.connect(<br>            host = mysql_host,<br>            port = mysql_port,<br>            db = mysql_db_name,<br>            user = mysql_user,<br>            passwd = mysql_passwd,<br>            charset = <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>            use_unicode = <span class="hljs-literal">True</span><br>        )<br>        self.cursor = self.connect.cursor()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        self.cursor.execute(<br>            <span class="hljs-string">&quot;&quot;&quot;insert into douban(serial_number,movie_name,introduce,star,evaluate,des)</span><br><span class="hljs-string">            value (%s,%s,%s,%s,%s,%s)&quot;&quot;&quot;</span>,<br>            [item[<span class="hljs-string">&#x27;serial_number&#x27;</span>],item[<span class="hljs-string">&#x27;movie_name&#x27;</span>],item[<span class="hljs-string">&#x27;introduce&#x27;</span>],item[<span class="hljs-string">&#x27;star&#x27;</span>],item[<span class="hljs-string">&#x27;evaluate&#x27;</span>],item[<span class="hljs-string">&#x27;describe&#x27;</span>]]<br>        )<br>        self.connect.commit()<br>        <span class="hljs-keyword">return</span> item<br></code></pre></td></tr></table></figure></li></ul><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ol><li>导入mysql时没法指定表名，默认为项目名称</li><li>表要提前建好，注意如果字段类型错误也可能导致导入出错</li><li>我在导入时字段describe一直出错，好像是关键字，我换成des可以正常那个导入</li></ol><ul><li>在seetings.py中开启pipelines<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"> <span class="hljs-comment"># 只有开启此选项数据才会保存到数据库</span><br>ITEM_PIPELINES = &#123;<br>   <span class="hljs-comment"># &#x27;douban.pipelines.DoubanPipeline&#x27;: 300,</span><br>   <span class="hljs-string">&#x27;douban.pipelines.MysqlPipeline&#x27;</span>: <span class="hljs-number">300</span>,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="设置代理ip"><a href="#设置代理ip" class="headerlink" title="设置代理ip"></a>设置代理ip</h5><ul><li>在middlewares.py中创建代理类<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 代理IP设置</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">my_proxy</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self,request,spider</span>):<br>        request.meta[<span class="hljs-string">&#x27;proxy&#x27;</span>] = <span class="hljs-string">&#x27;http-cla.abuyun.com:9030&#x27;</span><br>        proxy_name_pass = <span class="hljs-string">b&#x27;xxxxxxxxxxxxx:xxxxxxxxxxxx&#x27;</span><br>        <span class="hljs-comment"># b&#x27;用户名:密码&#x27;</span><br>        encode_pass_name = base64.b64decode(proxy_name_pass)<br>        request.headers[<span class="hljs-string">&#x27;Proxy-Authorization&#x27;</span>] = <span class="hljs-string">&#x27;Basic &#x27;</span> + encode_pass_name.decode()<br>        <span class="hljs-comment"># decode() 只有转成字符串才可以相加</span><br></code></pre></td></tr></table></figure></li><li>将代理类添加到seetings.py中<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">DOWNLOADER_MIDDLEWARES = &#123;<br>   <span class="hljs-comment"># &#x27;douban.middlewares.DoubanDownloaderMiddleware&#x27;: 543,</span><br>    <span class="hljs-string">&#x27;douban.middlewares.my_proxy&#x27;</span>: <span class="hljs-number">543</span>,<br><span class="hljs-comment">#数字越小优先级越高</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="设置随机user-agent"><a href="#设置随机user-agent" class="headerlink" title="设置随机user-agent"></a>设置随机user-agent</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py">- 在middlewares.py中新建类<br><span class="hljs-comment">#user-agent</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">my_useragent</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self,request,spider</span>):<br>        USER_AGENT_LIST = [<br>            <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 &quot;</span><br>            <span class="hljs-string">&quot;(KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1&quot;</span>,<br>            <span class="hljs-string">&quot;Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 &quot;</span><br>            <span class="hljs-string">&quot;(KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11&quot;</span>,<br>            <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 &quot;</span><br>            <span class="hljs-string">&quot;(KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6&quot;</span>,<br>            <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 &quot;</span><br>            <span class="hljs-string">&quot;(KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6&quot;</span>,<br>            <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 &quot;</span><br>            <span class="hljs-string">&quot;(KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1&quot;</span>,<br>            <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 &quot;</span><br>        ]<br>        agent = random.choice(USER_AGENT_LIST)<br>        request.headers[<span class="hljs-string">&#x27;User_Agent&#x27;</span>] = agent<br><span class="hljs-comment"># 记得导入random模块</span><br></code></pre></td></tr></table></figure><ul><li>将代理类添加到seetings.py中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">DOWNLOADER_MIDDLEWARES</span> = &#123;<br>   # <span class="hljs-string">&#x27;douban.middlewares.DoubanDownloaderMiddleware&#x27;</span>: <span class="hljs-number">543</span>,<br>   <span class="hljs-string">&#x27;douban.middlewares.my_proxy&#x27;</span>: <span class="hljs-number">543</span>,<br>   <span class="hljs-string">&#x27;douban.middlewares.my_useragent&#x27;</span>: <span class="hljs-number">544</span>,<br>   #数字优先级不能相同<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Scrapy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker mysql的备份与恢复</title>
    <link href="/2018/09/27/docker-mysql%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <url>/2018/09/27/docker-mysql%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/StockSnap_94ZCJIRAW4.jpg"></p><h5 id="docker-mysql持久化"><a href="#docker-mysql持久化" class="headerlink" title="docker mysql持久化"></a>docker mysql持久化</h5><span id="more"></span><ul><li>拉取镜像 <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">docker</span> <span class="hljs-string">pull mysql:5.7</span><br></code></pre></td></tr></table></figure> 最好指定版本</li><li>启动镜像<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"> <span class="hljs-attr">docker</span> <span class="hljs-string">run -it -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mymysql -v /home/mysql/data:/var/lib/mysql  mysql:5.7</span><br><span class="hljs-comment">#  -p 3306:3306  指定端口</span><br><span class="hljs-comment">#  -e MYSQL_ROOT_PASSWORD=123456  指定root密码</span><br><span class="hljs-comment">#  --name mymysql 指定名称</span><br><span class="hljs-comment">#  -v /home/mysql/data:/var/lib/mysql  映射目录，MySQL运行的数据都会保存在data下面</span><br></code></pre></td></tr></table></figure></li><li>数据导出 <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">docker</span> <span class="hljs-string">exec -it mymysql mysqldump -uroot -p123456 gp_webserver &gt; /home/gp_webserver.sql</span><br><span class="hljs-comment"># 关键字 mysqldump </span><br></code></pre></td></tr></table></figure></li><li>数据导入<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#进入docker镜像</span><br><span class="hljs-attr">docker</span> <span class="hljs-string">exec -it mymysql mysql -uroot –proot</span><br><span class="hljs-comment">#创建数据库</span><br><span class="hljs-attr">create</span> <span class="hljs-string">database test_db;</span><br><span class="hljs-comment">#exit  退出镜像</span><br><span class="hljs-comment">#执行导入 若存在外键约束注意建表顺序</span><br><span class="hljs-attr">docker</span> <span class="hljs-string">exec -i mymysql mysql -uroot -p123456 test_db &lt; /home/gp_webserver.sql</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建tomcat-docker部署环境镜像</title>
    <link href="/2018/09/26/%E6%9E%84%E5%BB%BAtomcat-docker%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E9%95%9C%E5%83%8F/"/>
    <url>/2018/09/26/%E6%9E%84%E5%BB%BAtomcat-docker%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/yiyi.jpg"></p><h5 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h5><span id="more"></span><p>镜像基于docker centos构建，需要事先在服务器准备tomcat和jdk，镜像构建后可上传到私人仓库下次使用时直接pull，一般情况下一个镜像一般只部署一个项目，保持独立，可以使用自己熟悉或者稳定的的centos、tomcat、jdk版本，便于长期维护和排查错误。</p><ul><li>在服务器home目录下新建文件夹，将tomcat和jdk上传到该文件夹，解压</li><li>新建Dockerfile文件<br> <img src="http://omt7mlk6g.bkt.clouddn.com/Snipaste_2018-09-26_16-38-09.png" alt="avatar"></li><li>docker pull centos  </li><li>编辑Dockerfile文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#基础镜像  这里可以拉取固定版本或者拉取自己仓库的镜像</span><br><span class="hljs-attr">FROM</span> <span class="hljs-string">docker.io/centos</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#镜像维护者</span><br><span class="hljs-attr">MAINTAINER</span> <span class="hljs-string">Andrew</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#复制jre文件夹到镜像中</span><br><span class="hljs-comment">#./jdk1.8.0_121 物理机中文件位置，必须为相对当前Dockerfile的相对路径</span><br><span class="hljs-comment">#/opt/jdk8 镜像中的位置，docker会自动创建目录</span><br><span class="hljs-attr">COPY</span> <span class="hljs-string">./jdk1.8.0_121 /opt/jdk8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置JAVA环境变量</span><br><span class="hljs-attr">ENV</span> <span class="hljs-string">JAVA_HOME /opt/jdk8</span><br><span class="hljs-attr">ENV</span> <span class="hljs-string">CLASSPATH $JAVA_HOME/lib</span><br><span class="hljs-attr">ENV</span> <span class="hljs-string">PATH $PATH:$JAVA_HOME/bin</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#复制tomcat文件夹到镜像中</span><br><span class="hljs-attr">COPY</span> <span class="hljs-string">./apache-tomcat-9.0.1 /opt/tomcat9</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置tomcat环境变量</span><br><span class="hljs-attr">ENV</span> <span class="hljs-string">CATALINA_HOME /opt/tomcat9</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#加上这句话，启动会变快，但是不知道有没有其他影响</span><br><span class="hljs-attr">RUN</span> <span class="hljs-string">echo -e \\nJAVA_OPTS=&quot;-Djava.security.egd=file:/dev/./urandom&quot; &gt;&gt; /opt/tomcat9/bin/setclasspath.sh</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#启动tomcat命令</span><br><span class="hljs-attr">CMD</span> <span class="hljs-string">opt/tomcat9/bin/catalina.sh run</span><br><br></code></pre></td></tr></table></figure></li><li>构建镜像<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">docker</span> <span class="hljs-string">build -t docker/tomcat .</span><br><span class="hljs-comment"># -t 是将构建的镜像命名</span><br><span class="hljs-comment"># 最后的 . 是指当前路径下 所有必须要在该文件夹下执行</span><br></code></pre></td></tr></table></figure><img src="http://omt7mlk6g.bkt.clouddn.com/Snipaste_2018-09-26_16-52-33.png" alt="avatar"></li><li>查看镜像，可以看到生成的docker&#x2F;tomcat镜像<br> <img src="http://omt7mlk6g.bkt.clouddn.com/Snipaste_2018-09-26_16-55-35.png" alt="avatar"></li><li>启动镜像，将本地文件映射到tomcat的webapps目录下 <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">docker</span> <span class="hljs-string">run -it -d -p 8080:8080 --name docker-tomcat-test -v /home/tomcat-root:/opt/tomcat9/webapps/ROOT docker/tomcat</span><br><span class="hljs-comment"># -d 后台启动</span><br><span class="hljs-comment"># -i 以交互模式运行容器</span><br><span class="hljs-comment"># -t为容器重新分配一个伪输入终端  -it一般同时使用</span><br><span class="hljs-comment"># -p 将本机的8080端口映射到容器中的8080端口</span><br><span class="hljs-comment"># --name 命名</span><br><span class="hljs-comment"># -v /home/tomcat-root:/opt/tomcat9/webapps/ROOT  将本机的tomcat-root目录映射到容器中tomcat的webapps/ROOT目录</span><br><span class="hljs-comment"># 容器启动时tomcat的根目录其实是本机的tomcat-root目录 只需要将需要部署war包放在本机的tomcat-root目录即可</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker部署vue前端项目并设置负载均衡</title>
    <link href="/2018/08/30/docker%E9%83%A8%E7%BD%B2vue%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2018/08/30/docker%E9%83%A8%E7%BD%B2vue%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/StockSnap_VTDSKKSBWH.jpg"></p><h5 id="docker-环境准备"><a href="#docker-环境准备" class="headerlink" title="docker 环境准备"></a>docker 环境准备</h5><span id="more"></span><ul><li><p>之前用spring-boot开发的项目都是将前端项目作为静态资源放在static下，最后一起打<br>成war包部署在tomcat中。这样灵活度很低，也失去了前后端分离的意义。spring-boot可以<br>单独打成jar包，用内置的tomcat直接启动服务，而前端项目则可以直接部署在docker中。</p></li><li><p>安装docker</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># step 1: 安装必要的一些系统工具</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class="hljs-comment"># Step 2: 添加软件源信息</span><br>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-comment"># Step 3: 更新并安装Docker-CE</span><br>sudo yum makecache fast<br>sudo yum -y install docker-ce<br><span class="hljs-comment"># Step 4: 开启Docker服务</span><br>sudo service docker start<br><span class="hljs-comment"># 检查docker安装是否正常</span><br>docker version<br></code></pre></td></tr></table></figure><ul><li>拉去nginx镜像(直接从网易镜像中心拉取速度会快些)<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">docker</span> <span class="hljs-string">pull hub.c.163.com/public/nginx:1.2.1</span><br></code></pre></td></tr></table></figure>闲名字太长可以打个标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker tag hub.c.163.com/public/nginx:1.2.1 nginx<br><span class="hljs-comment">#docker images 查看会有两个镜像，可以删除名字长的那个了</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="部署前端项目"><a href="#部署前端项目" class="headerlink" title="部署前端项目"></a>部署前端项目</h5><p>我们前端项目打算部署3个冗余节点，然后再部署一个nginx作为负载均衡服务器，前端<br>项目打包后只有一个入口文件和几个样式文件js文件，用docker部署的时候只需要将这些<br>文件映射到docker容器中，还需要准备相应的nginx配置文件映射到容器中。</p><ul><li>在&#x2F;home路径下新建三个文件夹f1,f2,f3,以f1为例部署第一个节点</li><li>在f1下新建vue文件夹，将前端打包项目上传到vue文件夹中</li><li>在f1下新建nginx.conf配置文件(内容如下)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#设置root权限，需要映射nginx.conf配置文件,权限不足无法启动</span><br>user  root root;<br>worker_processes  1;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;<br><br>    access_log  /var/log/nginx/access.log  main;<br><br>    sendfile        on;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    keepalive_timeout  65;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>proxy_redirect          off;<br>proxy_set_header        Host <span class="hljs-variable">$host</span>;<br>proxy_set_header        X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>proxy_set_header        X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>client_max_body_size    10m;<br>client_body_buffer_size   128k;<br>proxy_connect_timeout   5s;<br>proxy_send_timeout      5s;<br>proxy_read_timeout      5s;<br>proxy_buffer_size        4k;<br>proxy_buffers           4 32k;<br>proxy_busy_buffers_size  64k;<br>proxy_temp_file_write_size 64k;<br><br>server &#123;<br><span class="hljs-comment">#抛出一个端口</span><br>listen 6501;<br><span class="hljs-comment">#设置服务器域名</span><br>server_name  192.168.88.60;<br>location  /  &#123;<br><span class="hljs-comment">#设置项目目录</span><br>root  /home/f1/vue;<br>index  index.html;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>创建容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"> docker run -it -d -p 6501:6501 --name f1 -v /home/f1/nginx.conf:/etc/nginx/nginx.conf -v /home/fn1/vue:/home/f1/vue --privileged nginx<br><span class="hljs-comment"># -v /home/f1/nginx.conf:/etc/nginx/nginx.conf  将f1下的nginx.conf映射的容器中的nginx目录下</span><br><span class="hljs-comment"># -v /home/f1/vue:/home/f1/vue 映射项目目录，我这里本地目录和容器目录一致</span><br><span class="hljs-comment"># --privileged  给权限</span><br></code></pre></td></tr></table></figure></li><li>创建另外两个f2,f3节点，配置文件只需更改listen端口和root目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#f2</span><br>server &#123;<br><span class="hljs-comment">#抛出一个端口</span><br>listen 6502;<br><span class="hljs-comment">#设置服务器域名</span><br>server_name  192.168.88.60;<br>location  /  &#123;<br><span class="hljs-comment">#设置项目目录</span><br>root  /home/f2/vue;<br>index  index.html;<br>&#125;<br>&#125;<br><span class="hljs-comment">#f3</span><br>server &#123;<br><span class="hljs-comment">#抛出一个端口</span><br>listen 6503;<br><span class="hljs-comment">#设置服务器域名</span><br>server_name  192.168.88.60;<br>location  /  &#123;<br><span class="hljs-comment">#设置项目目录</span><br>root  /home/f3/vue;<br>index  index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>f2,f3创建容器命令，记得将配置文件个项目都上传到相应的文件下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#f2</span><br>docker run -it -d -p 6502:6502 --name f2 -v /home/f2/nginx.conf:/etc/nginx/nginx.conf -v /home/fn2/vue:/home/f2/vue --privileged nginx<br><span class="hljs-comment">#f3</span><br>docker run -it -d -p 6503:6503 --name f3 -v /home/f3/nginx.conf:/etc/nginx/nginx.conf -v /home/fn3/vue:/home/f3/vue --privileged nginx<br></code></pre></td></tr></table></figure></li><li>查看启动容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps <br><span class="hljs-comment">#此时应该有三个容器启动</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="创建负载均衡nginx容器"><a href="#创建负载均衡nginx容器" class="headerlink" title="创建负载均衡nginx容器"></a>创建负载均衡nginx容器</h5><ul><li>只需要创建一个nginx.conf配置文件映射到容器，主要设置都在配置文件中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs bash">user  nginx;<br>worker_processes  1;<br><br>error_log  /var/log/nginx/error.log warn;<br>pid        /var/run/nginx.pid;<br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br><br>    log_format  main  <span class="hljs-string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;<br><br>    access_log  /var/log/nginx/access.log  main;<br><br>    sendfile        on;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    keepalive_timeout  65;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>proxy_redirect          off;<br>proxy_set_header        Host <span class="hljs-variable">$host</span>;<br>proxy_set_header        X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>proxy_set_header        X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>client_max_body_size    10m;<br>client_body_buffer_size   128k;<br>proxy_connect_timeout   5s;<br>proxy_send_timeout      5s;<br>proxy_read_timeout      5s;<br>proxy_buffer_size        4k;<br>proxy_buffers           4 32k;<br>proxy_busy_buffers_size  64k;<br>proxy_temp_file_write_size 64k;<br><br><span class="hljs-comment">#主要负载均衡配置</span><br>upstream fn &#123;<br>server 192.168.88.60:6501;<br>server 192.168.88.60:6502;<br>server 192.168.88.60:6503;<br>&#125;<br>server &#123;<br>        listen       6601;<br>        server_name  192.168.88.60; <br>        location / &#123;  <br>            proxy_pass   http://fn;<br>            index  index.html index.htm;  <br>        &#125;  <br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>启动负载均衡容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -d -p 8080:6601 --name ff1 -v /home/ff1/nginx.conf:/etc/nginx/nginx.conf  --privileged nginx<br></code></pre></td></tr></table></figure></li><li>此时访问192.168.88.60:8080会将请求分发到6501,6502,6503三个端口中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#可以执行 docker pause f1 f2 暂停掉f1 f2节点看访问是否正常</span><br><span class="hljs-comment"># 可以暂停任意节点节点检验，或者暂停掉三个节点看是否能访问</span><br><span class="hljs-comment"># docker unpause f1 启动暂停节点</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring boot 多模块开发和使用docker部署</title>
    <link href="/2018/07/12/spring-boot-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E5%92%8Cdocker%E9%83%A8%E7%BD%B2/"/>
    <url>/2018/07/12/spring-boot-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E5%92%8Cdocker%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/yehaizi.jpg"></p><h5 id="多模块的开发"><a href="#多模块的开发" class="headerlink" title="多模块的开发"></a>多模块的开发</h5> <span id="more"></span><ul><li><p>多模块的开发只是将原先的代码分模块存放，一般是将公共类或者独立业务作为单独<br> 模块存放，例如一些常用的工具类，权限控制模块等</p></li><li><p>新建项目spring-boot 项目，和平创建spring-boot项目一样</p></li><li><p>创建模块<br><img src="http://omt7mlk6g.bkt.clouddn.com/Snipaste_2018-08-30_16-32-50.png" alt="创建步骤"><br><img src="http://omt7mlk6g.bkt.clouddn.com/Snipaste_2018-08-30_16-33-29.png" alt="创建步骤"><br><img src="http://omt7mlk6g.bkt.clouddn.com/Snipaste_2018-08-30_16-33-55.png" alt="创建步骤"></p></li></ul><p>创建模块的时候选择的是maven项目</p><ul><li>主要变化的事pom文件，根目录下会有一个pom文件，可以将公共包的依赖都放在<br> 这里 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basic<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>paginate<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>common<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>core<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-comment">&lt;!--可以看出本项目由两个子模块--&gt;</span><br></code></pre></td></tr></table></figure></li><li>子模块之间的相互引用，和普通的包引用类似<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.basic<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h5><ul><li>打包配置 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Docker maven plugin --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docker-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">imageName</span>&gt;</span>&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">imageName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dockerDirectory</span>&gt;</span>src/main/basic<span class="hljs-tag">&lt;/<span class="hljs-name">dockerDirectory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Docker maven plugin --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>在src&#x2F;main&#x2F;basic下新建Dockerfile 文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">FROM</span> <span class="hljs-string">openjdk:8-jdk-alpine</span><br><span class="hljs-attr">VOLUME</span> <span class="hljs-string">/tmp</span><br><span class="hljs-attr">ADD</span> <span class="hljs-string">Basic-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="hljs-attr">ENTRYPOINT</span> <span class="hljs-string">[&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></code></pre></td></tr></table></figure></li><li>将整个项目上传到服务器，执行以下操作<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 打包项目</span><br><span class="hljs-attr">mvn</span> <span class="hljs-string">package</span><br><span class="hljs-comment"># 构建镜像</span><br><span class="hljs-attr">mvn</span> <span class="hljs-string">package docker:build</span><br><span class="hljs-comment"># docker images 就可以查看生成的镜像</span><br><span class="hljs-comment"># 启动镜像  然后在8080端口查看</span><br><span class="hljs-attr">docker</span> <span class="hljs-string">run -it -d -p 8080:8080 xxxxx</span><br></code></pre></td></tr></table></figure></li><li>可以将生成的镜像上传到镜像仓库(例如网易镜像仓库，需要先注册)<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">docker</span> <span class="hljs-string">login -u &#123;登录账号&#125; -p &#123;你的网易云密码&#125; hub.c.163.com</span><br><span class="hljs-comment">#Attention:登录账号可前往网易云控台，点击右上角用户名- 基本信息里查看。</span><br><span class="hljs-comment">#返回「Login Succeded」即为登录成功。</span><br><span class="hljs-attr">docker</span> <span class="hljs-string">tag &#123;镜像名或ID&#125; hub.c.163.com/&#123;你的用户名&#125;/&#123;标签名&#125;</span><br><span class="hljs-comment">#你的网易云镜像仓库推送地址为 hub.c.163.com/&#123;你的用户名&#125;/&#123;标签名&#125;</span><br><span class="hljs-comment"># 此处为你的用户名，不是你的邮箱帐号或者手机号码 登录网易云控制台，页面右上角头像右侧即为「用户名」</span><br><span class="hljs-attr">docker</span> <span class="hljs-string">push hub.c.163.com/&#123;你的用户名&#125;/&#123;标签名&#125;</span><br><span class="hljs-comment"># 推送成功后别人就可以pull你的镜像了</span><br><span class="hljs-attr">docker</span> <span class="hljs-string">pull hub.c.163.com/qiufeng05life/spring-boot.docker-test:latest</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot处理订单合同的解决方案</title>
    <link href="/2018/06/27/spring-boot%E5%A4%84%E7%90%86%E8%AE%A2%E5%8D%95%E5%90%88%E5%90%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/06/27/spring-boot%E5%A4%84%E7%90%86%E8%AE%A2%E5%8D%95%E5%90%88%E5%90%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/shunini3.jpg"></p><h5 id="准备合同模板"><a href="#准备合同模板" class="headerlink" title="准备合同模板"></a>准备合同模板</h5><span id="more"></span><ul><li><p>最主要功能是有新的保单时，提交一份用户的保单信息，然后根据保单信息生成一份合同，合同是PDF的，模板是固定的，而且带有公司的公章。</p></li><li><p>用word制作合同模板，将固定该信息全部写入word，公章也是，只预留一些会改变的信息的位置，</p></li><li><p>另存为PDF</p></li><li><p>用Adobe Acrobat DC打开pdf文件</p></li><li><p>点击 工具–&gt;准备表单 </p></li><li><p>然后在需要填入信息的地方添加文本域<br> <img src="http://omt7mlk6g.bkt.clouddn.com/Snipaste_2018-06-27_16-58-19.png" alt="Alt text"></p></li></ul><h5 id="在pom文件中添加包"><a href="#在pom文件中添加包" class="headerlink" title="在pom文件中添加包"></a>在pom文件中添加包</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itextpdf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>layout<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- only needed for forms --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itextpdf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>forms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- only needed for Asian fonts --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itextpdf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>font-asian<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="创建pdf处理类"><a href="#创建pdf处理类" class="headerlink" title="创建pdf处理类"></a>创建pdf处理类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PDFUtils</span> &#123;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> contract  用户保单信息的model</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath  生成合同的pdf模板文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">contractTranPdf</span><span class="hljs-params">(Contract contract,String filePath)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileNewName</span> <span class="hljs-operator">=</span> contract.getContractNo();  <span class="hljs-comment">//文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;src/main/resources/pdf&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">toPath</span> <span class="hljs-operator">=</span> path +<span class="hljs-string">&quot;/&quot;</span> + fileNewName +  <span class="hljs-string">&quot;.pdf&quot;</span>;  <span class="hljs-comment">//生成保单的本地临时地址</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(filePath);<br>            <span class="hljs-type">PdfDocument</span> <span class="hljs-variable">pdfDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PdfDocument</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PdfReader</span>(filePath), <span class="hljs-keyword">new</span> <span class="hljs-title class_">PdfWriter</span>(toPath));<br>            <span class="hljs-type">PdfAcroForm</span> <span class="hljs-variable">pdfAcroForm</span> <span class="hljs-operator">=</span> PdfAcroForm.getAcroForm(pdfDoc, <span class="hljs-literal">true</span>);<br>            <span class="hljs-type">PdfFont</span> <span class="hljs-variable">font</span> <span class="hljs-operator">=</span> PdfFontFactory.createFont(<span class="hljs-string">&quot;STSongStd-Light&quot;</span>, <span class="hljs-string">&quot;UniGB-UCS2-H&quot;</span>, <span class="hljs-literal">false</span>);<br>            pdfAcroForm.getField(<span class="hljs-string">&quot;name&quot;</span>).setValue(contract.getName()).setFont(font);   <span class="hljs-comment">//setFont(font)解决中文显示问题</span><br>            pdfAcroForm.getField(<span class="hljs-string">&quot;phone&quot;</span>).setValue(contract.getPhone());<br>            pdfAcroForm.getField(<span class="hljs-string">&quot;code&quot;</span>).setValue(contract.getCode());<br>            pdfAcroForm.getField(<span class="hljs-string">&quot;email&quot;</span>).setValue(contract.getEmail());<br>            <span class="hljs-keyword">if</span> (Verification.verificationString(contract.getAddress())) &#123;<br>                pdfAcroForm.getField(<span class="hljs-string">&quot;address&quot;</span>).setValue(contract.getAddress()).setFont(font);<br>            &#125;<br><br>            pdfAcroForm.flattenFields();<br>            pdfDoc.close();<br>            <span class="hljs-comment">//上传到七牛</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">uploadPath</span> <span class="hljs-operator">=</span> QiniuUtil.uploadFile(toPath,fileNewName);<br>            log.info(<span class="hljs-string">&quot;七牛预览地址:&#123;&#125;&quot;</span>, uploadPath);<br>            <span class="hljs-comment">//删除本地临时文件</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(toPath)).delete();<br>            <span class="hljs-keyword">if</span> (success) &#123;<br>                log.info(<span class="hljs-string">&quot;删除本地上传文件成功&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> uploadPath;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(toPath)).delete();<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果有多个合同模板，可以创建不同function对应的不同的模板，也可以传入不同的模板文件解决，可以根据具体项目解决</p><h5 id="生成合同的存储问题"><a href="#生成合同的存储问题" class="headerlink" title="生成合同的存储问题"></a>生成合同的存储问题</h5><p>因为合同要提供预览和下载，所以讲生成合同上传到七牛，在数据库直接存储七牛的地址即可</p><ul><li>spring-boot七牛的依赖包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.qiniu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>[7.2.0, 7.2.99]<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>分装的上传类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiniuUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACCESSKEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECRETKEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String BUCKET= <span class="hljs-string">&quot;contract&quot;</span>;  <span class="hljs-comment">//bucket</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DOMAIN_OF_BUCKET</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://xxxxxxx.xxx.clouddn.com&quot;</span>;  <span class="hljs-comment">//空间绑定的域名  bucket不同  域名不同</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Auth <span class="hljs-title function_">QiniuUtilInit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Auth.create(ACCESSKEY,SECRETKEY);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传文件 返回文件访问路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> localFilePath</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">uploadFile</span><span class="hljs-params">(String localFilePath, String filename)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//构造一个带指定Zone对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Zone.zone0());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">domainOfBucket</span> <span class="hljs-operator">=</span> DOMAIN_OF_BUCKET;   <span class="hljs-comment">//空间绑定的域名  bucket不同  域名不同</span><br><br>        <span class="hljs-type">UploadManager</span> <span class="hljs-variable">uploadManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadManager</span>(cfg);<br>        <span class="hljs-comment">//...生成上传凭证，然后准备上传</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> BUCKET;<br><br>        <span class="hljs-comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> filename;<br>        <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> QiniuUtilInit();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> auth.uploadToken(bucket);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> uploadManager.put(localFilePath, key, upToken);<br>            <span class="hljs-comment">//解析上传成功的结果</span><br>            <span class="hljs-type">DefaultPutRet</span> <span class="hljs-variable">putRet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);<br>            System.out.println(putRet.key);<br>            System.out.println(putRet.hash);<br>            <span class="hljs-keyword">return</span> domainOfBucket + <span class="hljs-string">&quot;/&quot;</span> +putRet.key;<br>        &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>直接调用uploadFile方法，上传成功后会返回访问地址 </li><li>注意上传时如果指定文件名，同一个bucket下不能有重名文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel小知识点记录</title>
    <link href="/2018/05/05/laravel%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <url>/2018/05/05/laravel%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/erwan-hesry.jpg"></p><h5 id="表单方式伪造"><a href="#表单方式伪造" class="headerlink" title="表单方式伪造"></a>表单方式伪造</h5><span id="more"></span><p>对于在Html模板中请求PUT PATCH DELETE类型的路由，Laravel提供了表单伪造方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/foo/bar&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PUT&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_token&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>//还可以使用&#123;&#123; method_field(&#x27;PUT&#x27;) &#125;&#125;，类似于token的传递方式<br></code></pre></td></tr></table></figure><h5 id="部分资源路由"><a href="#部分资源路由" class="headerlink" title="部分资源路由"></a>部分资源路由</h5><p>在使用资源控制器时，我们不一定都会使用到全部资源路由，我们可以通过only和except关键字限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">Route</span>::<span class="hljs-title function_ invoke__">resource</span>(<span class="hljs-string">&#x27;photo&#x27;</span>, <span class="hljs-string">&#x27;PhotoController&#x27;</span>, [<span class="hljs-string">&#x27;only&#x27;</span> =&gt; [<br>    <span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-string">&#x27;show&#x27;</span><br>]]);<br><span class="hljs-title class_">Route</span>::<span class="hljs-title function_ invoke__">resource</span>(<span class="hljs-string">&#x27;photo&#x27;</span>, <span class="hljs-string">&#x27;PhotoController&#x27;</span>, [<span class="hljs-string">&#x27;except&#x27;</span> =&gt; [<br>    <span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-string">&#x27;store&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;destroy&#x27;</span><br>]]);<br></code></pre></td></tr></table></figure><h5 id="对已存在数据库的字段操作"><a href="#对已存在数据库的字段操作" class="headerlink" title="对已存在数据库的字段操作"></a>对已存在数据库的字段操作</h5><p>在开发中我们经常会遇到对原有数据库的修改操作，有时我们想给表中添加新的字段但并不想破坏已存在的数据，<br>我们可以使用一下方法</p><ul><li>新建迁移文件<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">php</span> <span class="hljs-string">artisan make:migration add_avatar_and_introduction_to_users_table --table=users</span><br></code></pre></td></tr></table></figure><code>add_avatar_and_introduction_to_users_table</code>这只是命名规范，有助于理解<br><code>--tables=users</code>  指定的是要修改的表</li><li>修改迁移文件（和新建表是的操作基本一致）<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title class_">Schema</span>::<span class="hljs-title function_ invoke__">table</span>(<span class="hljs-string">&#x27;users&#x27;</span>, function (Blueprint <span class="hljs-variable">$table</span>) &#123;<br>        <span class="hljs-variable">$table</span>-&gt;<span class="hljs-keyword">string</span>(<span class="hljs-string">&#x27;avatar&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">nullable</span>();<br>        <span class="hljs-variable">$table</span>-&gt;<span class="hljs-keyword">string</span>(<span class="hljs-string">&#x27;introduction&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">nullable</span>();<br>    &#125;);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">down</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title class_">Schema</span>::<span class="hljs-title function_ invoke__">table</span>(<span class="hljs-string">&#x27;users&#x27;</span>, function (Blueprint <span class="hljs-variable">$table</span>) &#123;<br>        <span class="hljs-variable">$table</span>-&gt;<span class="hljs-title function_ invoke__">dropColumn</span>(<span class="hljs-string">&#x27;avatar&#x27;</span>);<br>        <span class="hljs-variable">$table</span>-&gt;<span class="hljs-title function_ invoke__">dropColumn</span>(<span class="hljs-string">&#x27;introduction&#x27;</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>执行php artisan migrate 就可以在原先的users表中新添加两个字段</li><li>laravel还支持修改现有表的字段，比如字段名称，属性，当然还可以删除，只不过是多了操作关键字，但是最常用的还是向现有表中添加新字段</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel中富文本编辑器上传图片的处理</title>
    <link href="/2018/04/17/laravel%E4%B8%AD%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <url>/2018/04/17/laravel%E4%B8%AD%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/deniel-fazekas-1504431-unsplash.jpg"></p><h5 id="封装公用的图片上传类"><a href="#封装公用的图片上传类" class="headerlink" title="封装公用的图片上传类"></a>封装公用的图片上传类</h5><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageUpload</span><br>&#123;<br>    <span class="hljs-type">protected</span> <span class="hljs-variable">$allowed_ext</span> <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;png&quot;</span>, <span class="hljs-string">&quot;jpg&quot;</span>, <span class="hljs-string">&quot;gif&quot;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>];<br>    <span class="hljs-keyword">public</span> function <span class="hljs-title function_">save</span><span class="hljs-params">($file, $folder, $file_prefix, $max_width = <span class="hljs-literal">false</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 构建存储的文件夹规则，值如：uploads/images/avatars/201709/21/</span><br>        <span class="hljs-comment">// 文件夹切割能让查找效率更高。</span><br>        $folder_name = <span class="hljs-string">&quot;uploads/images/$folder/&quot;</span> . date(<span class="hljs-string">&quot;Ym/d&quot;</span>, time());<br>        <span class="hljs-comment">// 文件具体存储的物理路径，`public_path()` 获取的是 `public` 文件夹的物理路径。</span><br>        <span class="hljs-comment">// 值如：/home/vagrant/Code/larabbs/public/uploads/images/avatars/201709/21/</span><br>        $upload_path = public_path() . <span class="hljs-string">&#x27;/&#x27;</span> . $folder_name;<br>        <span class="hljs-comment">// 获取文件的后缀名，因图片从剪贴板里黏贴时后缀名为空，所以此处确保后缀一直存在</span><br>        $extension = strtolower($file-&gt;getClientOriginalExtension()) ?: <span class="hljs-string">&#x27;png&#x27;</span>;<br>        <span class="hljs-comment">// 拼接文件名，加前缀是为了增加辨析度，前缀可以是相关数据模型的 ID</span><br>        <span class="hljs-comment">// 值如：1_1493521050_7BVc9v9ujP.png</span><br>        $filename = $file_prefix . <span class="hljs-string">&#x27;_&#x27;</span> . time() . <span class="hljs-string">&#x27;_&#x27;</span> . str_random(<span class="hljs-number">10</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . $extension;<br>        <span class="hljs-comment">// 如果上传的不是图片将终止操作</span><br>        <span class="hljs-keyword">if</span> ( ! in_array($extension, $<span class="hljs-built_in">this</span>-&gt;allowed_ext)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 将图片移动到我们的目标存储路径中</span><br>        $file-&gt;move($upload_path, $filename);<br>        <span class="hljs-comment">// 如果限制了图片宽度，就进行裁剪</span><br>        <span class="hljs-keyword">if</span> ($max_width &amp;&amp; $extension != <span class="hljs-string">&#x27;gif&#x27;</span>) &#123;<br>            <span class="hljs-comment">// 此类中封装的函数，用于裁剪图片</span><br>            $<span class="hljs-built_in">this</span>-&gt;reduceSize($upload_path . <span class="hljs-string">&#x27;/&#x27;</span> . $filename, $max_width);<br>        &#125;<br>        <span class="hljs-keyword">return</span> [<br>            <span class="hljs-string">&#x27;path&#x27;</span> =&gt; config(<span class="hljs-string">&#x27;app.url&#x27;</span>) . <span class="hljs-string">&quot;/$folder_name/$filename&quot;</span><br>        ];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="安装图片裁剪扩展包"><a href="#安装图片裁剪扩展包" class="headerlink" title="安装图片裁剪扩展包"></a>安装图片裁剪扩展包</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">composer</span> <span class="hljs-string">require intervention/image</span><br></code></pre></td></tr></table></figure><h5 id="发布配置文件"><a href="#发布配置文件" class="headerlink" title="发布配置文件"></a>发布配置文件</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">php</span> <span class="hljs-string">artisan vendor:publish --provider=&quot;Intervention\Image\ImageServiceProviderLaravel5&quot;</span><br></code></pre></td></tr></table></figure><p>默认会生成config&#x2F;image.php文件，不用做修改</p><h5 id="在封装的ImageUpload类中新添加图片裁剪方法"><a href="#在封装的ImageUpload类中新添加图片裁剪方法" class="headerlink" title="在封装的ImageUpload类中新添加图片裁剪方法"></a>在封装的ImageUpload类中新添加图片裁剪方法</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reduceSize</span>(<span class="hljs-params"><span class="hljs-variable">$file_path</span>, <span class="hljs-variable">$max_width</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 先实例化，传参是文件的磁盘物理路径</span><br>    <span class="hljs-variable">$image</span> = <span class="hljs-title class_">Image</span>::<span class="hljs-title function_ invoke__">make</span>(<span class="hljs-variable">$file_path</span>);<br>    <span class="hljs-comment">// 进行大小调整的操作</span><br>    <span class="hljs-variable">$image</span>-&gt;<span class="hljs-title function_ invoke__">resize</span>(<span class="hljs-variable">$max_width</span>, <span class="hljs-literal">null</span>, function (<span class="hljs-variable">$constraint</span>) &#123;<br>        <span class="hljs-comment">// 设定宽度是 $max_width，高度等比例双方缩放</span><br>        <span class="hljs-variable">$constraint</span>-&gt;<span class="hljs-title function_ invoke__">aspectRatio</span>();<br>        <span class="hljs-comment">// 防止裁图时图片尺寸变大</span><br>        <span class="hljs-variable">$constraint</span>-&gt;<span class="hljs-title function_ invoke__">upsize</span>();<br>    &#125;);<br>    <span class="hljs-comment">// 对图片修改后进行保存</span><br>    <span class="hljs-variable">$image</span>-&gt;<span class="hljs-title function_ invoke__">save</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="集成Simditor编辑器到项目中"><a href="#集成Simditor编辑器到项目中" class="headerlink" title="集成Simditor编辑器到项目中"></a>集成Simditor编辑器到项目中</h5><ul><li>开始之前，先 下载 <a href="https://github.com/mycolorway/simditor/releases/download/v2.3.6/simditor-2.3.6.zip">Simditor</a></li><li>将下载的 simditor.css 放置于 resources&#x2F;assets&#x2F;editor&#x2F;css 文件夹，将 hotkeys.js, module.js, simditor.js, uploader.js 四个文件放置于 resources&#x2F;assets&#x2F;editor&#x2F;js 文件夹中</li><li>修改webpack.mix.js文件，将以上文件拷贝到public目录下 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">let mix = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;laravel-mix&#x27;</span>);<br><br>mix.<span class="hljs-title function_ invoke__">js</span>(<span class="hljs-string">&#x27;resources/assets/js/app.js&#x27;</span>, <span class="hljs-string">&#x27;public/js&#x27;</span>)<br>    .<span class="hljs-title function_ invoke__">sass</span>(<span class="hljs-string">&#x27;resources/assets/sass/app.scss&#x27;</span>, <span class="hljs-string">&#x27;public/css&#x27;</span>)<br>    .<span class="hljs-title function_ invoke__">copyDirectory</span>(<span class="hljs-string">&#x27;resources/assets/editor/js&#x27;</span>, <span class="hljs-string">&#x27;public/js&#x27;</span>)<br>    .<span class="hljs-title function_ invoke__">copyDirectory</span>(<span class="hljs-string">&#x27;resources/assets/editor/css&#x27;</span>, <span class="hljs-string">&#x27;public/css&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li>在模板文件中引入 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">@section(&#x27;styles&#x27;)<br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; asset(&#x27;css/simditor.css&#x27;) &#125;&#125;&quot;</span>&gt;</span><br>@stop<br>@section(&#x27;scripts&#x27;)<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; asset(&#x27;js/module.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; asset(&#x27;js/hotkeys.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; asset(&#x27;js/uploader.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; asset(&#x27;js/simditor.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> editor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Simditor</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">textarea</span>: $(<span class="hljs-string">&#x27;#editor&#x27;</span>),</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>@stop<br></code></pre></td></tr></table></figure></li></ul><h5 id="编辑器上传图片-官方文档"><a href="#编辑器上传图片-官方文档" class="headerlink" title="编辑器上传图片 官方文档"></a>编辑器上传图片 <a href="http://simditor.tower.im/docs/doc-config.html#anchor-upload">官方文档</a></h5><ul><li>实例化设置 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>   $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-keyword">var</span> editor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Simditor</span>(&#123;<br>           <span class="hljs-attr">textarea</span>: $(<span class="hljs-string">&#x27;#editor&#x27;</span>),<br>           <span class="hljs-attr">upload</span>: &#123;<br>               <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;&#123;&#123; route(&#x27;</span>topics.<span class="hljs-property">upload_image</span><span class="hljs-string">&#x27;) &#125;&#125;&#x27;</span>,<br>               <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">_token</span>: <span class="hljs-string">&#x27;&#123;&#123; csrf_token() &#125;&#125;&#x27;</span> &#125;,<br>               <span class="hljs-attr">fileKey</span>: <span class="hljs-string">&#x27;upload_file&#x27;</span>,<br>               <span class="hljs-attr">connectionCount</span>: <span class="hljs-number">3</span>,<br>               <span class="hljs-attr">leaveConfirm</span>: <span class="hljs-string">&#x27;文件上传中，关闭此页面将取消上传。&#x27;</span><br>           &#125;,<br>           <span class="hljs-attr">pasteImage</span>: <span class="hljs-literal">true</span>,<br>       &#125;);<br>   &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>参数解释</li><li>pasteImage —— 设定是否支持图片黏贴上传，这里我们使用 true 进行开启；</li><li>url —— 处理上传图片的 URL；</li><li>params —— 表单提交的参数，Laravel 的 POST 请求必须带防止 CSRF 跨站请求伪造的 _token 参数；</li><li>fileKey —— 是服务器端获取图片的键值，我们设置为 upload_file;</li><li>connectionCount —— 最多只能同时上传 3 张图片；</li><li>leaveConfirm —— 上传过程中，用户关闭页面时的提醒。</li><li>服务端设置<br> 服务端需要返回的响应格式 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;error message&quot;</span>, # optional<br>  <span class="hljs-string">&quot;file_path&quot;</span>: <span class="hljs-string">&quot;[real file path]&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>服务端方法 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> function <span class="hljs-title function_">uploadImage</span><span class="hljs-params">(Request $request, ImageUploadHandler $uploader)</span><br>    &#123;<br>        <span class="hljs-comment">// 初始化返回数据，默认是失败的</span><br>        $data = [<br>            <span class="hljs-string">&#x27;success&#x27;</span>   =&gt; <span class="hljs-literal">false</span>,<br>            <span class="hljs-string">&#x27;msg&#x27;</span>       =&gt; <span class="hljs-string">&#x27;上传失败!&#x27;</span>,<br>            <span class="hljs-string">&#x27;file_path&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span><br>        ];<br>        <span class="hljs-comment">// 判断是否有上传文件，并赋值给 $file</span><br>        <span class="hljs-keyword">if</span> ($file = $request-&gt;upload_file) &#123;<br>            <span class="hljs-comment">// 保存图片到本地</span><br>            $result = $uploader-&gt;save($request-&gt;upload_file, <span class="hljs-string">&#x27;topics&#x27;</span>, \Auth::id(), <span class="hljs-number">1024</span>);<br>            <span class="hljs-comment">// 图片保存成功的话</span><br>            <span class="hljs-keyword">if</span> ($result) &#123;<br>                $data[<span class="hljs-string">&#x27;file_path&#x27;</span>] = $result[<span class="hljs-string">&#x27;path&#x27;</span>];<br>                $data[<span class="hljs-string">&#x27;msg&#x27;</span>]       = <span class="hljs-string">&quot;上传成功!&quot;</span>;<br>                $data[<span class="hljs-string">&#x27;success&#x27;</span>]   = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> $data;<br>    &#125;<br></code></pre></td></tr></table></figure>ImageUploadHandler $uploader是注入封装的图片上传类</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-booth和vue前后端分离项目整合部署</title>
    <link href="/2018/03/16/spring-booth%E5%92%8Cvue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%E9%83%A8%E7%BD%B2/"/>
    <url>/2018/03/16/spring-booth%E5%92%8Cvue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E6%95%B4%E5%90%88%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/ivan-stern-1072150-unsplash.jpg"></p><h5 id="vue和spring-boot的本地开发调试"><a href="#vue和spring-boot的本地开发调试" class="headerlink" title="vue和spring-boot的本地开发调试"></a>vue和spring-boot的本地开发调试</h5><span id="more"></span><h6 id="项目是前后台分离开发，后端spring-boot只提供api接口，前端vue通过vue-axios请求后端接口获得数据，spring-boot项目初始化后更改port端口号"><a href="#项目是前后台分离开发，后端spring-boot只提供api接口，前端vue通过vue-axios请求后端接口获得数据，spring-boot项目初始化后更改port端口号" class="headerlink" title="项目是前后台分离开发，后端spring-boot只提供api接口，前端vue通过vue-axios请求后端接口获得数据，spring-boot项目初始化后更改port端口号"></a>项目是前后台分离开发，后端spring-boot只提供api接口，前端vue通过vue-axios请求后端接口获得数据，spring-boot项目初始化后更改port端口号</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">server.<span class="hljs-property">port</span>=<span class="hljs-number">8989</span><br></code></pre></td></tr></table></figure><h6 id="更改vue项目config文件下的index-js文件"><a href="#更改vue项目config文件下的index-js文件" class="headerlink" title="更改vue项目config文件下的index.js文件"></a>更改vue项目config文件下的index.js文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">dev</span>: &#123;<br><br>    <span class="hljs-comment">// Paths</span><br>    <span class="hljs-attr">assetsSubDirectory</span>: <span class="hljs-string">&#x27;static&#x27;</span>,<br>    <span class="hljs-attr">assetsPublicPath</span>: <span class="hljs-string">&#x27;/back&#x27;</span>,<br>    <span class="hljs-attr">proxyTable</span>: &#123;<br>    &#125;,<br><br>    <span class="hljs-comment">// Various Dev Server settings</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-comment">// can be overwritten by process.env.HOST</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>, <span class="hljs-comment">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span><br>  &#125;,<br></code></pre></td></tr></table></figure><h6 id="更改以下三项"><a href="#更改以下三项" class="headerlink" title="更改以下三项"></a>更改以下三项</h6><ul><li><p>assetsPublicPath：&#x2F;后端项目名</p></li><li><p>host：localhost</p></li><li><p>port：8080   这个端口号与spring-boot设置启动的端口号不同就可以</p></li></ul><h6 id="封装axios请求接口文件"><a href="#封装axios请求接口文件" class="headerlink" title="封装axios请求接口文件"></a>封装axios请求接口文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">headers</span>.<span class="hljs-property">post</span>[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br><br><span class="hljs-comment">// 请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>) &#123;<br>  <span class="hljs-keyword">return</span> config;<br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;)<br><span class="hljs-comment">// 响应拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-keyword">return</span> response;<br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;)<br><br><br><span class="hljs-keyword">var</span> beforeUrl = <span class="hljs-string">&#x27;http://localhost:8989/&#x27;</span>;<br><span class="hljs-comment">// 封装axios请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">axiosFun</span>(<span class="hljs-params">url,params,method = <span class="hljs-string">&#x27;post&#x27;</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">method</span>: method,<br>      <span class="hljs-attr">url</span>: beforeUrl + url,<br>      <span class="hljs-attr">data</span>: params<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(response.<span class="hljs-property">data</span>);<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(error);<br>    &#125;)<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 封装axios的get请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">url</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    axios.<span class="hljs-title function_">get</span>(beforeUrl + url)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(response.<span class="hljs-property">data</span>);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;)<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 封装axios的put请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">url, params</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    axios.<span class="hljs-title function_">put</span>(beforeUrl + url + params)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(response.<span class="hljs-property">data</span>);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;)<br>  &#125;)<br>&#125;<br><span class="hljs-comment">// 封装axios的del请求</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">del</span>(<span class="hljs-params">url,params</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    axios.<span class="hljs-title function_">delete</span>(beforeUrl + url + params)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(response.<span class="hljs-property">data</span>);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">reject</span>(error);<br>      &#125;)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 获取省份列表</span><br>  <span class="hljs-title function_">getProvince</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;address/province&#x27;</span>);<br>  &#125;,<br>  ...<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="在vue文件中调用封装的api接口文件"><a href="#在vue文件中调用封装的api接口文件" class="headerlink" title="在vue文件中调用封装的api接口文件"></a>在vue文件中调用封装的api接口文件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../api/api&#x27;</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    data () &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">provinceList</span>: []<br>      &#125;<br>    &#125;,<br>    created () &#123;<br>      api.<span class="hljs-title function_">getProvince</span>()<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">provinceList</span> = res.<span class="hljs-property">data</span><br>        &#125;)<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h6 id="解决请求接口跨域问题"><a href="#解决请求接口跨域问题" class="headerlink" title="解决请求接口跨域问题"></a>解决请求接口跨域问题</h6><p>在spring-boot中新建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CORSConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WebMvcConfigurer <span class="hljs-title function_">corsConfigurer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> &#123;<br>                registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                        .allowedOrigins(ALL)<br>                        .allowedMethods(ALL)<br>                        .allowedHeaders(ALL)<br>                        .allowCredentials(<span class="hljs-literal">true</span>);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="整合部署"><a href="#整合部署" class="headerlink" title="整合部署"></a>整合部署</h5><h6 id="更改API接口请求文件的请求头"><a href="#更改API接口请求文件的请求头" class="headerlink" title="更改API接口请求文件的请求头"></a>更改API接口请求文件的请求头</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> beforeUrl = <span class="hljs-string">&#x27;/&#x27;</span>;<br></code></pre></td></tr></table></figure><h6 id="更改vue项目config文件下index-js文件"><a href="#更改vue项目config文件下index-js文件" class="headerlink" title="更改vue项目config文件下index.js文件"></a>更改vue项目config文件下index.js文件</h6><p>更改assetsPublicPath一项即可，替换为你的spring-boot的项目名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">build</span>: &#123;<br>    <span class="hljs-comment">// Template for index.html</span><br>    <span class="hljs-attr">index</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../dist/index.html&#x27;</span>),<br><br>    <span class="hljs-comment">// Paths</span><br>    <span class="hljs-attr">assetsRoot</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../dist&#x27;</span>),<br>    <span class="hljs-attr">assetsSubDirectory</span>: <span class="hljs-string">&#x27;static&#x27;</span>,<br>    <span class="hljs-attr">assetsPublicPath</span>: <span class="hljs-string">&#x27;/back&#x27;</span>,<br>  &#125;<br></code></pre></td></tr></table></figure><h6 id="执行npm-run-build-打包vue项目"><a href="#执行npm-run-build-打包vue项目" class="headerlink" title="执行npm run build 打包vue项目"></a>执行npm run build 打包vue项目</h6><p>项目打包后在dist文件下生成一个static文件夹和index.html文件，将这两个拷贝到spring-boot项目的resources文件夹下，若已经存在static文件替换即可</p><h6 id="在spring-boot中新添加文件防止访问接口出现乱码"><a href="#在spring-boot中新添加文件防止访问接口出现乱码" class="headerlink" title="在spring-boot中新添加文件防止访问接口出现乱码"></a>在spring-boot中新添加文件防止访问接口出现乱码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置静态文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 防止出现乱码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> HttpMessageConverter&lt;String&gt; <span class="hljs-title function_">responseBodyConverter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringHttpMessageConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>(<br>                Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>        <span class="hljs-built_in">super</span>.configureMessageConverters(converters);<br>        converters.add(responseBodyConverter());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureContentNegotiation</span><span class="hljs-params">(ContentNegotiationConfigurer configurer)</span> &#123;<br>        configurer.favorPathExtension(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="在application中添加配置项"><a href="#在application中添加配置项" class="headerlink" title="在application中添加配置项"></a>在application中添加配置项</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">spring.<span class="hljs-property">thymeleaf</span>.<span class="hljs-property">prefix</span>=<span class="hljs-attr">classpath</span>:/<br>spring.<span class="hljs-property">thymeleaf</span>.<span class="hljs-property">mode</span> =<span class="hljs-title class_">HTML5</span><br>spring.<span class="hljs-property">thymeleaf</span>.<span class="hljs-property">cache</span>=<span class="hljs-literal">true</span><br>spring.<span class="hljs-property">thymeleaf</span>.<span class="hljs-property">content</span>-type=text/html<br>spring.<span class="hljs-property">http</span>.<span class="hljs-property">encoding</span>.<span class="hljs-property">force</span>=<span class="hljs-literal">true</span><br>spring.<span class="hljs-property">http</span>.<span class="hljs-property">encoding</span>.<span class="hljs-property">charset</span>=<span class="hljs-variable constant_">UTF</span>-<span class="hljs-number">8</span><br>spring.<span class="hljs-property">http</span>.<span class="hljs-property">encoding</span>.<span class="hljs-property">enabled</span>=<span class="hljs-literal">true</span><br>server.<span class="hljs-property">tomcat</span>.<span class="hljs-property">uri</span>-encoding=<span class="hljs-variable constant_">UTF</span>-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p><em>将spring-boot项目打包部署即可，之前看有文章说还需要写一个访问index.html的根路由，但是我操作之后一直访问不了index.html文件，我将index.html文件直接移到static文件下面，启动spring-boot项目访问根路由直接进入了index.html文件</em></p><p><a href="http://sparkgis.com/java/2017/12/vue2spring-boot%E5%BC%80%E5%8F%91%E5%92%8C%E9%83%A8%E7%BD%B2-%E5%8E%9F-vue2spring-boot%E5%BC%80%E5%8F%91%E5%92%8C%E9%83%A8%E7%BD%B2-%E8%B5%B7%E9%A3%8E%E4%BA%86426/">参考文章</a></p>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot项目中快速接入支付宝</title>
    <link href="/2017/12/29/spring-boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    <url>/2017/12/29/spring-boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5%E6%94%AF%E4%BB%98%E5%AE%9D/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/mpumelelo-macu.jpg"></p><h5 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h5><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.guerlab<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sdk-alipay-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="在proprties配置文件中添加支付宝相关配置"><a href="#在proprties配置文件中添加支付宝相关配置" class="headerlink" title="在proprties配置文件中添加支付宝相关配置"></a>在proprties配置文件中添加支付宝相关配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">sdk.alipay.dev=<span class="hljs-literal">true</span>         默认<span class="hljs-literal">false</span>,为<span class="hljs-literal">true</span>表示使用沙箱环境<br>sdk.alipay.sign-type=RSA2   签名算法  <br>sdk.alipay.app-id=          appid<br>sdk.alipay.<span class="hljs-keyword">private</span>-key=     创建的应用私钥<br>sdk.alipay.alipay-<span class="hljs-keyword">public</span>-key=    支付宝公钥<br></code></pre></td></tr></table></figure><h5 id="创建AlipayService处理主要支付逻辑"><a href="#创建AlipayService处理主要支付逻辑" class="headerlink" title="创建AlipayService处理主要支付逻辑"></a>创建AlipayService处理主要支付逻辑</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.service;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alipay.api.AlipayClient;<br><span class="hljs-keyword">import</span> com.alipay.api.request.AlipayTradePagePayRequest;<br><span class="hljs-keyword">import</span> com.alipay.api.request.AlipayTradePayRequest;<br><span class="hljs-keyword">import</span> com.alipay.api.request.AlipayTradeWapPayRequest;<br><span class="hljs-keyword">import</span> com.demo.enums.OrderStatusEnum;<br><span class="hljs-keyword">import</span> com.demo.mappers.OrderMapper;<br><span class="hljs-keyword">import</span> com.demo.model.Order;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> net.guerlab.sdk.alipay.controller.AlipayAbstractController;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AlipayAbstractController</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AlipayClient client;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">alipay</span><span class="hljs-params">(String orderId, HttpServletResponse httpResponse)</span>&#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.selectByPrimaryKey(orderId);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        data.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,order.getOrderId());   <span class="hljs-comment">//商户订单号</span><br>        data.put(<span class="hljs-string">&quot;product_code&quot;</span>,<span class="hljs-string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);   <span class="hljs-comment">//产品码, APP支付 QUICK_MSECURITY_PAY, PC支付 FAST_INSTANT_TRADE_PAY, 移动H5支付 QUICK_WAP_PAY</span><br>        data.put(<span class="hljs-string">&quot;total_amount&quot;</span>,order.getOrderAccount());   <span class="hljs-comment">//订单金额</span><br>        data.put(<span class="hljs-string">&quot;subject&quot;</span>,<span class="hljs-string">&quot;education order test&quot;</span>);     <span class="hljs-comment">//订单标题</span><br>        log.info(<span class="hljs-string">&quot;data = &#123;&#125;&quot;</span>,data.toJSONString());<br><br>        <span class="hljs-comment">//app支付</span><br><span class="hljs-comment">//        AlipayTradePayRequest request = new AlipayTradePayRequest();</span><br>        <span class="hljs-comment">//pc支付</span><br>        <span class="hljs-type">AlipayTradePagePayRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradePagePayRequest</span>();<br>        <span class="hljs-comment">//移动h5支付</span><br><span class="hljs-comment">//        AlipayTradeWapPayRequest request = new AlipayTradeWapPayRequest();</span><br><br>        request.setNotifyUrl(<span class="hljs-string">&quot;http://127.0.0.1:8080/order/notify/&quot;</span>+orderId);     <span class="hljs-comment">//异步通知地址，必须为外网可以访问的地址 </span><br>        request.setBizContent(data.toJSONString());    <span class="hljs-comment">//业务参数</span><br><br>        <span class="hljs-comment">//APP支付</span><br><span class="hljs-comment">//        return client.sdkExecute(request).getBody();</span><br><br><span class="hljs-comment">//        pc支付</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> httpResponse.getWriter();<br>            httpResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>            writer.write(client.pageExecute(request).getBody());<br>            writer.flush();<br>            writer.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;创建订单失败&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异步请求处理</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">notify</span><span class="hljs-params">( String orderId, HttpServletRequest request)</span>&#123;<br>        log.error(<span class="hljs-string">&quot;orderId=&#123;&#125;&quot;</span>,orderId);<br>        log.error(<span class="hljs-string">&quot;request=&#123;&#125;&quot;</span>,request);<br>        <span class="hljs-keyword">if</span> (!notify0(request.getParameterMap()))&#123;<br>            <span class="hljs-comment">//处理签名失败</span><br>        &#125;<br><br>        request.getParameter(<span class="hljs-string">&quot;trade_no&quot;</span>);  <span class="hljs-comment">//获取请求参数中的商户订单号</span><br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.selectByPrimaryKey(orderId);<br>        order.setOrderStatus(OrderStatusEnum.SUCCESS.getCode());<br>        <span class="hljs-keyword">try</span> &#123;<br>            orderMapper.updateByPrimaryKey(order);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.error(<span class="hljs-string">&quot;【订单支付修改订单状态错误】 orderId=&#123;&#125;&quot;</span>,orderId);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pay error&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>调用service方法alipay方法传入orderId即可发起支付</p></li><li><p>异步回调地址必须是外网可以访问的地址，否则签名会出错</p></li><li><p>在设置订单标题时填中文的时候有时候也会出现签名报错，在打印出的签名中显示中文乱码，改用英文或者设置字符集，但是我设置了gb2312字符集好像没用</p></li><li><p>如果遇到权限、或者其他问题可设置沙箱环境测试，只需将应用公钥上传到沙箱环境，然后在配置中设置sdk.alipay.dev&#x3D;true，更改沙箱appid,如果沙箱测试没问题，应该是应用权限不足，可在蚂蚁金服开放平台查看相关文档。</p></li></ul><blockquote><p><a href="https://gitee.com/guerlab_net/sdk-alipay?utm_source=tuicool&utm_medium=referral">原项目地址</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>Alipay</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot中的redis</title>
    <link href="/2017/12/23/spring-boot%E4%B8%AD%E7%9A%84redis/"/>
    <url>/2017/12/23/spring-boot%E4%B8%AD%E7%9A%84redis/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/jonathan-chai-1503195-unsplash.jpg"></p><h5 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h5><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h5><ul><li>添加实例化配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.tools.redisdb;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisShardInfo;<br><span class="hljs-keyword">import</span> redis.clients.jedis.ShardedJedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.ShardedJedisPool;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisManager</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">JedisPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">redisHost</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">redisAuth</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">redisPort</span> <span class="hljs-operator">=</span> <span class="hljs-number">6379</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">redisIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br><br><span class="hljs-comment">//可用连接实例的最大数目，默认值为8；  </span><br>  <span class="hljs-comment">//如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_ACTIVE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span>;<br>  <span class="hljs-comment">//控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_IDLE</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>  <span class="hljs-comment">//等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_WAIT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;  <br><br>  <span class="hljs-comment">//在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">TEST_ON_BORROW</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisManager</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initPool</span><span class="hljs-params">(String host,<span class="hljs-type">int</span> port, String auth,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> timeout)</span>&#123;<br><br> <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == pool)&#123;<br> <span class="hljs-keyword">synchronized</span> (JedisPool.class) &#123;<br> <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == pool)&#123;<br><span class="hljs-built_in">this</span>.redisAuth = auth;<br><span class="hljs-built_in">this</span>.redisHost = host;<br><span class="hljs-built_in">this</span>.redisPort = port;<br><span class="hljs-built_in">this</span>.redisIndex = index;<br><span class="hljs-built_in">this</span>.timeout = timeout;<br><br> <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br> config.setMaxTotal(MAX_ACTIVE);  <br>     config.setMaxIdle(MAX_IDLE);  <br>     config.setMaxWaitMillis(MAX_WAIT);  <br>     config.setTestOnBorrow(TEST_ON_BORROW);  <br>     pool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(config, <span class="hljs-built_in">this</span>.redisHost, <span class="hljs-built_in">this</span>.redisPort, <span class="hljs-built_in">this</span>.timeout, <span class="hljs-built_in">this</span>.redisAuth, <span class="hljs-built_in">this</span>.redisIndex);<br> &#125;<br> &#125;<br> &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取Jedis实例</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (pool != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Jedis</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> pool.getResource();<br><span class="hljs-keyword">return</span> resource;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 回收Jedis对象资源</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> jedis</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnResource</span><span class="hljs-params">(Jedis jedis)</span> &#123;<br><span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">//pool.returnResource(jedis);</span><br>jedis.close();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Jedis对象出异常的时候，回收Jedis对象资源</span><br><span class="hljs-comment"> * 主要是将pool还回到链接池中，避免创建链接时的耗时和链接不够用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> jedis</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnBrokenResource</span><span class="hljs-params">(Jedis jedis)</span> &#123;<br><span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">//pool.returnBrokenResource(jedis);</span><br>jedis.close();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    pool.destroy();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在resources添加redisdb.properties配置文件，也可以直接添加到application配置文件文件中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"># redis服务器地址 <br>redisdb.host=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br># redis映射端口号<br>redisdb.port=<span class="hljs-number">6379</span><br># redis数据库索引（默认为<span class="hljs-number">0</span>）<br>redisdb.index=<span class="hljs-number">2</span><br># redis链接超时时间<br>redisdb.timeout=<span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><ul><li>添加常用方法调用类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.tools.redisdb;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> com.demo.tools.obj.SerializeUtil;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtil</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">RedisManager</span> <span class="hljs-variable">redisManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisManager</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisUtil</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">super</span>();<br><br> <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>in = Resources.getResourceAsStream(<span class="hljs-string">&quot;redisdb.properties&quot;</span>);<span class="hljs-comment">//new FileInputStream(&quot;redisdb.properties&quot;);</span><br>prop.load(in);<br><span class="hljs-type">String</span> <span class="hljs-variable">redisHost</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">&quot;redisdb.host&quot;</span>); <br><span class="hljs-type">int</span> <span class="hljs-variable">redisPort</span> <span class="hljs-operator">=</span> Integer.valueOf(prop.getProperty(<span class="hljs-string">&quot;redisdb.port&quot;</span>)); <br><span class="hljs-type">String</span> <span class="hljs-variable">redisAuth</span> <span class="hljs-operator">=</span> prop.getProperty(<span class="hljs-string">&quot;redisdb.auth&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">redisTimeout</span> <span class="hljs-operator">=</span> Integer.valueOf(prop.getProperty(<span class="hljs-string">&quot;redisdb.timeout&quot;</span>));<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Integer.valueOf(prop.getProperty(<span class="hljs-string">&quot;redisdb.index&quot;</span>));<br>redisManager.initPool(redisHost, redisPort, redisAuth,index,redisTimeout);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>log.error(<span class="hljs-string">&quot;【redis链接错误】&quot;</span>);<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字符串存储</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> expire</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, String value, <span class="hljs-type">int</span> expire)</span> &#123;<br><br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> RedisManager.getJedis();<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == jedis) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>jedis.set(key, value);<br><span class="hljs-comment">//System.out.print(&quot;redis port&quot; + redisManager.getRedisPort());</span><br>log.info(<span class="hljs-string">&quot;【set pool=&#123;&#125;】&quot;</span>,jedis);<br>jedis.expire(key, expire);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>log.error(<span class="hljs-string">&quot;redis error&#123;&#125;&quot;</span>,e.getCause());<br>RedisManager.returnBrokenResource(jedis);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>RedisManager.returnResource(jedis);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> RedisManager.getJedis();<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == jedis) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> jedis.get(key);<br>log.info(<span class="hljs-string">&quot;【get pool=&#123;&#125;】&quot;</span>,jedis);<br><span class="hljs-keyword">return</span> value;<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>log.error(<span class="hljs-string">&quot;redis error&#123;&#125;&quot;</span>,e.getCause());<br>RedisManager.returnBrokenResource(jedis);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>RedisManager.returnResource(jedis);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">del</span><span class="hljs-params">(String key)</span> &#123;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> RedisManager.getJedis();<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == jedis) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>jedis.del(key);<br>RedisManager.returnResource(jedis);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/** </span><br><span class="hljs-comment">    * 设置对象 </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> obj </span><br><span class="hljs-comment">    */</span>  <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setObject</span><span class="hljs-params">(String key ,Object obj)</span>&#123;<br>   <span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> RedisManager.getJedis();<br>   <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == jedis) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br>   <span class="hljs-keyword">try</span> &#123;<br>   obj = obj == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>():obj;<br>   jedis.set(key.getBytes(), SerializeUtil.serialize(obj));<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>   log.error(<span class="hljs-string">&quot;redis error&#123;&#125;&quot;</span>,e.getCause());<br>   RedisManager.returnBrokenResource(jedis);<br>   e.printStackTrace();<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<span class="hljs-keyword">finally</span> &#123;<br>   RedisManager.returnResource(jedis);<br>   &#125;<br>&#125;  <br>     <br>   <span class="hljs-comment">/** </span><br><span class="hljs-comment">    * 获取对象 </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> Object </span><br><span class="hljs-comment">    */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(String key)</span>&#123;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> RedisManager.getJedis();<br>    <span class="hljs-keyword">if</span>( jedis == <span class="hljs-literal">null</span> || ! jedis.exists(key))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125;  <br><br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">byte</span>[] value = jedis.get(key.getBytes());<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> SerializeUtil.unserialize(value);<br><span class="hljs-keyword">return</span> obj;<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>log.error(<span class="hljs-string">&quot;redis error&#123;&#125;&quot;</span>,e.getCause());<br>RedisManager.returnBrokenResource(jedis);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>RedisManager.returnResource(jedis);<br>&#125;<br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="在程序中的使用"><a href="#在程序中的使用" class="headerlink" title="在程序中的使用"></a>在程序中的使用</h5><p>可以直接依赖注入直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisUtil redisUtil;<br><br><br><span class="hljs-comment">//写入redis</span><br>redisUtil.set(key,value,expire);<br><br><span class="hljs-comment">//读取redis</span><br>redisUtil.get(key);<br><br></code></pre></td></tr></table></figure><h5 id="使用redis作为缓存"><a href="#使用redis作为缓存" class="headerlink" title="使用redis作为缓存"></a>使用redis作为缓存</h5><ul><li>可以写一个基础服务类，需要用到的缓存的service继承这个服务类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.service;<br><br><span class="hljs-keyword">import</span> com.demo.tools.obj.Verification;<br><span class="hljs-keyword">import</span> com.demo.tools.redisdb.RedisUtil;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseService</span> &#123;<br>    <br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">findObject</span><span class="hljs-params">(String key)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(Verification.verificationString(key) == <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> RedisUtil.getObject(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(String key,Object value)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> ((Verification.verificationString(key) == <span class="hljs-literal">false</span>) ||<br>                (<span class="hljs-literal">null</span> == value)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> RedisUtil.setObject(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">del</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-keyword">if</span>(Verification.verificationString(key) == <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> RedisUtil.del(key);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>这里的Verification.verificationString(key)是检查字符串是否有效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//检查string类型是否有效，基本检查，null,empty</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verificationString</span><span class="hljs-params">(String str)</span>&#123;<br><br><span class="hljs-keyword">if</span>((<span class="hljs-literal">null</span> == str) || (str.isEmpty())) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在service中使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//check redis 在读取前先检查redis缓存是否存在</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> findObject(keys);<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != obj)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">obj</span>;<br>&#125;<br><br><br><span class="hljs-comment">//write to redis 查询数据库之后写入redis   要保持存储key的唯一</span><br>putObject(keys,object);<br><br><br><span class="hljs-comment">//在更新和删除操作时直接将缓存删除</span><br>RedisUtil.del(keys);<br></code></pre></td></tr></table></figure><h5 id="需要注意的几点"><a href="#需要注意的几点" class="headerlink" title="需要注意的几点"></a>需要注意的几点</h5><ul><li>在object存储的时候要先将对象序列化，查询出来后在反序列化，所以对象中的任何元素都要支持序列化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//让model继承Serializable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li><p>object存储时如果封装的对象过于庞大，会出现序列化超时的错误，可以通过增大timeout的值解决，但是不建议timeout值过大，应该考虑将封装的对象拆分，减少多表关联查询等</p></li><li><p>在redis方法中不管是异常还是正常结束都要将pool归还到连接池中，因为创建一个连接是很耗时的，还有如果连接数超过并发数的时候连接池可以很好的解决这个问题</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot枚举状态在查询遍历时的映射</title>
    <link href="/2017/12/08/spring-boot%E6%9E%9A%E4%B8%BE%E7%8A%B6%E6%80%81%E5%9C%A8%E6%9F%A5%E8%AF%A2%E9%81%8D%E5%8E%86%E6%97%B6%E7%9A%84%E6%98%A0%E5%B0%84/"/>
    <url>/2017/12/08/spring-boot%E6%9E%9A%E4%B8%BE%E7%8A%B6%E6%80%81%E5%9C%A8%E6%9F%A5%E8%AF%A2%E9%81%8D%E5%8E%86%E6%97%B6%E7%9A%84%E6%98%A0%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/lilly-rum-250927-unsplash.jpg"></p><span id="more"></span><p><em>在后台开发中为了便于维护和统一管理状态类的存储一般都是定义一个枚举类，在数据库中一般直接存储一个状态码。可以通过状态码获取枚举值添加到返回信息中，方便模板渲染。</em></p><h5 id="定义一个订单状态枚举类"><a href="#定义一个订单状态枚举类" class="headerlink" title="定义一个订单状态枚举类"></a>定义一个订单状态枚举类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.enums;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">OrderStatusEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CodeEnum</span>&#123;<br>    NEW(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;新订单&quot;</span>),<br>    FINISHED(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;完结&quot;</span>),<br>    CANCEL(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;已取消&quot;</span>)<br>    ;<br><br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-keyword">private</span> String message;<br><br>    OrderStatusEnum(Integer code, String message) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="这里定义的枚举类继承CodeEnum接口，这个接口主要是获取枚举的code"><a href="#这里定义的枚举类继承CodeEnum接口，这个接口主要是获取枚举的code" class="headerlink" title="这里定义的枚举类继承CodeEnum接口，这个接口主要是获取枚举的code"></a>这里定义的枚举类继承CodeEnum接口，这个接口主要是获取枚举的code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.enums;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CodeEnum</span> &#123;<br>    Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="定义一个枚举工具类，主要功能实现传入枚举code和枚举类，返回code值对应的枚举值"><a href="#定义一个枚举工具类，主要功能实现传入枚举code和枚举类，返回code值对应的枚举值" class="headerlink" title="定义一个枚举工具类，主要功能实现传入枚举code和枚举类，返回code值对应的枚举值"></a>定义一个枚举工具类，主要功能实现传入枚举code和枚举类，返回code值对应的枚举值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.utils;<br><br><br><span class="hljs-keyword">import</span> com.demo.enums.CodeEnum;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CodeEnum</span>&gt; T <span class="hljs-title function_">getByCode</span><span class="hljs-params">(Integer code, Class&lt;T&gt; enumClass)</span>&#123;<br>        <span class="hljs-keyword">for</span> (T each:enumClass.getEnumConstants())&#123;<br>            <span class="hljs-keyword">if</span> (code.equals(each.getCode()))&#123;<br>                <span class="hljs-keyword">return</span> each;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里注意要将方法定义为static</p><h5 id="在返回model类中添加一个返回实体"><a href="#在返回model类中添加一个返回实体" class="headerlink" title="在返回model类中添加一个返回实体"></a>在返回model类中添加一个返回实体</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnore</span><br>   <span class="hljs-keyword">public</span> OrderStatusEnum <span class="hljs-title function_">getOrderStatusEnum</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> EnumUtil.getByCode(orderStatus,OrderStatusEnum.class);<br>   &#125;<br></code></pre></td></tr></table></figure><p>传入订单状态code和订单状态枚举类<br><em>@JsonIgnore注解作用是–如果返回的是json并不在模板中渲染，则此字段不返回，如只返回一个数据接口</em></p><h5 id="在freemarker模板中渲染"><a href="#在freemarker模板中渲染" class="headerlink" title="在freemarker模板中渲染"></a>在freemarker模板中渲染</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;order.getOrderStatusEnum().message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot中使用Swagger2构建API文档</title>
    <link href="/2017/11/18/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BAAPI%E6%96%87%E6%A1%A3/"/>
    <url>/2017/11/18/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BAAPI%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/john-cobb-13965.jpg"></p><h5 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h5><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="新建一个java类作为Swagger2的配置文件"><a href="#新建一个java类作为Swagger2的配置文件" class="headerlink" title="新建一个java类作为Swagger2的配置文件"></a>新建一个java类作为Swagger2的配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>    <span class="hljs-comment">//该注解是用来让spring加载该配置</span><br><span class="hljs-meta">@EnableSwagger2</span>   <span class="hljs-comment">//该配置用来启用swagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))  <span class="hljs-comment">//通过@ApiOperation注解来指定方法生成文档</span><br> <span class="hljs-comment">//               .apis(RequestHandlerSelectors.basePackage(&quot;com.demo.controller&quot;))    //通过指定类来生成该类下所有API的文档</span><br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;Education-Api文档&quot;</span>)  <span class="hljs-comment">//名称</span><br>                .description(<span class="hljs-string">&quot;后台接口文档详细信息&quot;</span>)  <span class="hljs-comment">//详细描述</span><br>                .termsOfServiceUrl(<span class="hljs-string">&quot;http://127.0.0.1:8989&quot;</span>)    <span class="hljs-comment">//可以填写自己的网站域名</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="添加注解（通过注解指定生成文档个人感觉灵活度高些）"><a href="#添加注解（通过注解指定生成文档个人感觉灵活度高些）" class="headerlink" title="添加注解（通过注解指定生成文档个人感觉灵活度高些）"></a>添加注解（通过注解指定生成文档个人感觉灵活度高些）</h5><p>在需要生成Api文档的接口方法上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * value 指定接口的名称</span><br><span class="hljs-comment">     * response 指定返回值类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@ApiOperation(value = &quot;查询购物车列表&quot;,response = ReturnData.class)</span><br></code></pre></td></tr></table></figure><p>这里的ReturnData类是自己定义的，而且需要在类中添加注解以便Swagger2识别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnOne</span> &#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;状态码&quot;,example = &quot;1&quot;,required = true)</span><br>    <span class="hljs-keyword">private</span> String code;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;描述信息&quot;,example = &quot;请求成功&quot;,required = true)</span><br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;返回主体&quot;)</span><br>    <span class="hljs-keyword">private</span> Object data;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="添加注解限定参数类型"><a href="#添加注解限定参数类型" class="headerlink" title="添加注解限定参数类型"></a>添加注解限定参数类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * name 参数名</span><br><span class="hljs-comment">     * value 参数描述</span><br><span class="hljs-comment">     * dataType 参数类型</span><br><span class="hljs-comment">     * required 参数是否必选</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@ApiImplicitParam(name = &quot;UserId&quot;,value = &quot;用户Id&quot;,dataType = &quot;Integer&quot;,required = true)</span><br></code></pre></td></tr></table></figure><p><strong>Swagger2生成API文档是要基于RESTful API设计规范的，所以…</strong></p><blockquote><p><a href="https://swagger.io/">Swagger</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot配置log(将log按级别分别存放不同文件)</title>
    <link href="/2017/11/16/spring-boot%E9%85%8D%E7%BD%AElog-%E5%B0%86log%E6%8C%89%E7%BA%A7%E5%88%AB%E5%88%86%E5%88%AB%E5%AD%98%E6%94%BE%E4%B8%8D%E5%90%8C%E6%96%87%E4%BB%B6/"/>
    <url>/2017/11/16/spring-boot%E9%85%8D%E7%BD%AElog-%E5%B0%86log%E6%8C%89%E7%BA%A7%E5%88%AB%E5%88%86%E5%88%AB%E5%AD%98%E6%94%BE%E4%B8%8D%E5%90%8C%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/mahir-uysal-529531-unsplash.jpg"></p><h5 id="单独添加logback-spring-xml配置文件（这一段配置就可以解决，可以根据自己需求更改）"><a href="#单独添加logback-spring-xml配置文件（这一段配置就可以解决，可以根据自己需求更改）" class="headerlink" title="单独添加logback-spring.xml配置文件（这一段配置就可以解决，可以根据自己需求更改）"></a>单独添加logback-spring.xml配置文件（这一段配置就可以解决，可以根据自己需求更改）</h5><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里是配置控制台打印的log样式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                %d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 对info级别的log进行过滤然后单独存放 class里面是logback类的完整路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileInfoLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                %d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--滚动策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--存放路径--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>G:\java\log\tomcat\shell\info.%d.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 过滤处理error级别的日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileErrorLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>                %d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--滚动策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--路径--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>G:\java\log\tomcat\shell\error.%d.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 引用配置项  ref里面是上面配置的name--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileInfoLog&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileErrorLog&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="简化log操作（还是之前提到的lombok）"><a href="#简化log操作（还是之前提到的lombok）" class="headerlink" title="简化log操作（还是之前提到的lombok）"></a>简化log操作（还是之前提到的lombok）</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在类中添加注解*@Slf4j* 注意来源是（*import lombok.extern.slf4j.Slf4j;*）<br>然后就可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">log.info();<br>log.warn();<br>log.error(<span class="hljs-string">&quot;添加订单错误, order=&#123;&#125;&quot;</span>,order);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*这里在输出变量事可以先用&#123;&#125;做占位符，在后面输出变量，可以同时设置多个</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot配置Mybatis一对一、一对多关系</title>
    <link href="/2017/11/16/spring-boot%E9%85%8D%E7%BD%AEMybatis%E4%B8%80%E5%AF%B9%E4%B8%80%E3%80%81%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/"/>
    <url>/2017/11/16/spring-boot%E9%85%8D%E7%BD%AEMybatis%E4%B8%80%E5%AF%B9%E4%B8%80%E3%80%81%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/malte-wingen-381978-unsplash.jpg"></p><h5 id="在model中添加保存查询到的关联数据的字段"><a href="#在model中添加保存查询到的关联数据的字段" class="headerlink" title="在model中添加保存查询到的关联数据的字段"></a>在model中添加保存查询到的关联数据的字段</h5><span id="more"></span><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>例如order表关联查询orderDetail表<br><br><span class="hljs-regexp">//</span>定义一对一关系的（一般定义一个一对多就可以了）<br>private OrderDetail detail;<br><span class="hljs-regexp">//</span>定义一个存储一对多关系的<br>private List&lt;OrderDetail&gt; detailList;<br></code></pre></td></tr></table></figure><h5 id="在OrderMapper-xml文件的resultMap中添加映射关系"><a href="#在OrderMapper-xml文件的resultMap中添加映射关系" class="headerlink" title="在OrderMapper.xml文件的resultMap中添加映射关系"></a>在OrderMapper.xml文件的resultMap中添加映射关系</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.education.model.EducationOrder&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderType&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_account&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderAccount&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderStatus&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 一对一关系 这里的detail就是上面在model中定义的detail，javaType指向的是orderDetail所在的路径--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;detail&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.education.model.OrderDetail&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;courseId&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;coursePrice&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;courseName&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_score&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DOUBLE&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;courseScore&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 一对多关系 detail即为上面定义的detailList--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;detailList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.education.model.OrderDetail&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;courseId&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;coursePrice&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;courseName&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;course_score&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DOUBLE&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;courseScore&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="拼接查询"><a href="#拼接查询" class="headerlink" title="拼接查询"></a>拼接查询</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllOrder&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>  SELECT o.*,d.* FROM order AS o LEFT JOIN order_detail AS d  ON o.order_id = d.order_id <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot配置Mybatis</title>
    <link href="/2017/11/12/spring-boot%E9%85%8D%E7%BD%AEMybatis/"/>
    <url>/2017/11/12/spring-boot%E9%85%8D%E7%BD%AEMybatis/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/mahkeo.jpg"></p><h5 id="添加mvn依赖"><a href="#添加mvn依赖" class="headerlink" title="添加mvn依赖"></a>添加mvn依赖</h5><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="配置数据库连接"><a href="#配置数据库连接" class="headerlink" title="配置数据库连接"></a>配置数据库连接</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/dmeo?characterEncoding=utf-8&amp;useSSL=false</span><br></code></pre></td></tr></table></figure><h5 id="配置Mybatis的配置文件，主要配置其映射关系"><a href="#配置Mybatis的配置文件，主要配置其映射关系" class="headerlink" title="配置Mybatis的配置文件，主要配置其映射关系"></a>配置Mybatis的配置文件，主要配置其映射关系</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br> <span class="hljs-comment">&lt;!-- 配置mybatis的缓存，延迟加载等等一系列属性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 全局映射器启用缓存 *主要将此属性设置完成即可--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 查询时，关闭关联对象即时加载以提高性能 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指 定)，不会加载关联表的所有字段，以提高性能 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-comment">&lt;!-- model的存放地址 以及添加别名，调用的时候可以直接使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.education.model.User&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>autoReconnect=true<span class="hljs-symbol">&amp;amp;</span>zeroDateTimeBehavior=round&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolMaximumActiveConnections&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;50&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolMaximumIdleConnections&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!-- xml文件的存放地址 注意这些配置上下都是一一对应的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/education/model/mapper/UserMapper.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="在Application中添加Bean（必须添加，个人理解相当于Laravel中的autoload）"><a href="#在Application中添加Bean（必须添加，个人理解相当于Laravel中的autoload）" class="headerlink" title="在Application中添加Bean（必须添加，个人理解相当于Laravel中的autoload）"></a>在Application中添加Bean（必须添加，个人理解相当于Laravel中的autoload）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserMapper <span class="hljs-title function_">UserMapper</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MyBatisSqlSessionFactory.openSession();<br>   <span class="hljs-keyword">return</span> sqlSession.getMapper(UserMapper.class);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="涉及到的三个文件"><a href="#涉及到的三个文件" class="headerlink" title="涉及到的三个文件"></a>涉及到的三个文件</h5><ul><li>UserMapper.xml    主要是MySQL语句的存放文件</li><li>User.java              model文件</li><li>UserMapper.java   存放的是调用xml文件的方法实体，在service可以通过调用此文件的方法实现相关的MySQL操作</li></ul><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先依赖注入</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><span class="hljs-comment">//然后在方法中就可以直接调用了</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByPrimaryKey(userId);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot实现登录验证</title>
    <link href="/2017/11/02/spring-boot%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/"/>
    <url>/2017/11/02/spring-boot%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/josh-edgoose-1100779-unsplash.jpg"></p><h5 id="登录信息的处理"><a href="#登录信息的处理" class="headerlink" title="登录信息的处理"></a>登录信息的处理</h5><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">   * 用户登录</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> user_name</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> user_id_card</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>  <span class="hljs-keyword">public</span> InDataInfo <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;userName&quot;)</span> String user_name,  </span><br><span class="hljs-params">                             <span class="hljs-meta">@RequestParam(&quot;userIdCard&quot;)</span> String user_id_card)</span>&#123;<br>                       <span class="hljs-comment">/**</span><br><span class="hljs-comment">                       *获取登录信息，可以是单个传值，也可以将登录信息定义一个对象</span><br><span class="hljs-comment">                       *</span><br><span class="hljs-comment">                       */</span><br>      <span class="hljs-type">EducationUser</span> <span class="hljs-variable">educationUser</span> <span class="hljs-operator">=</span> userMapper.selectByUserName(user_name);<br>      <span class="hljs-type">InDataInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InDataInfo</span>();    <span class="hljs-comment">//这边是定义的一个返回对象</span><br>      <span class="hljs-keyword">if</span> (educationUser == <span class="hljs-literal">null</span>)&#123;     <span class="hljs-comment">//验证登录传入用户名数据库是否存在</span><br>          info.setCode(ResultEnum.ERROR.getCode());  <span class="hljs-comment">//返回的状态码和状态信息应该用枚举定义</span><br>          info.setMsg(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!userMapperService.compareLogin(educationUser,user_id_card))&#123;<br>      <span class="hljs-comment">//这里是验证用户输入的身份证号是否与数据库一直，这里也可以是验证密码</span><br>          info.setCode(ResultEnum.ERROR.getCode());<br>          info.setMsg(<span class="hljs-string">&quot;身份证号码验证错误&quot;</span>);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> userMapperService.getToken(educationUser);<br><br>          <span class="hljs-comment">//将token存入redis   </span><br>          redisUtil.set(user_id_card,token,<span class="hljs-number">7200</span>);<br>          info.setCode(ResultEnum.SUCCESS.getCode());<br>          info.setMsg(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>          info.setToken(token);<br>      &#125;<br>      <span class="hljs-keyword">return</span> info;     <span class="hljs-comment">//返回的对象应该继续封装简化</span><br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="密码验证"><a href="#密码验证" class="headerlink" title="密码验证"></a>密码验证</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 验证用户登录信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user_id_card</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareLogin</span><span class="hljs-params">(EducationUser user,String user_id_card)</span>&#123;<br>        <span class="hljs-keyword">return</span> user_id_card.equals(user.getUserIdCard());      <span class="hljs-comment">//验证身份证号信息</span><br><span class="hljs-comment">//        return passwordToHash(password).equals(user.getUserPassword());   //验证密码</span><br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="密码加密函数"><a href="#密码加密函数" class="headerlink" title="密码加密函数"></a>密码加密函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">  * 密码hash加密</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> String <span class="hljs-title function_">passwordToHash</span><span class="hljs-params">(String password)</span> &#123;<br>     <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">digest</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-256&quot;</span>);<br>         digest.update(password.getBytes());<br>         <span class="hljs-type">byte</span>[] src = digest.digest();<br>         <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>         <span class="hljs-comment">// 字节数组转16进制字符串</span><br>         <span class="hljs-comment">// https://my.oschina.net/u/347386/blog/182717</span><br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> aSrc : src) &#123;<br>             <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Integer.toHexString(aSrc &amp; <span class="hljs-number">0xFF</span>);<br>             <span class="hljs-keyword">if</span> (s.length() &lt; <span class="hljs-number">2</span>) &#123;<br>                 stringBuilder.append(<span class="hljs-string">&#x27;0&#x27;</span>);<br>             &#125;<br>             stringBuilder.append(s);<br>         &#125;<br>         <span class="hljs-keyword">return</span> stringBuilder.toString();<br>     &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException ignore) &#123;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>密码加密在用户注册时要将密码加密存入数据库，在登录时将用户输入密码加密与数据库进行比较</p><h5 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">(EducationUser user)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            token = JWT.create()<br>                    .withAudience(user.getUserId().toString())<br>                    .sign(Algorithm.HMAC256(user.getUserPassword()));<br>        &#125;<span class="hljs-keyword">catch</span> (UnsupportedEncodingException ignore)&#123;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br>我这里使用jwt包，也可以自己定义token算法<br>需要添加JWT依赖<br><br>&lt;dependency&gt;<br>&lt;groupId&gt;com.auth0&lt;/groupId&gt;<br>&lt;artifactId&gt;java-jwt&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">3.0</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ul><li>lombok包可以简化get set方法,使用时直接在model类注解@@Data(get set…)或者@Getter&#x2F;@Setter,model中就不用再写get set 方法了(记得在IDEA中装Lombok插件)<br><a href="https://projectlombok.org/features/all">Lombok Project</a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>可以将配置文件改变后缀application.yml，yml配置会简化很多，而且一目了然<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1/demo?acterEncoding=utf-8&amp;useSSL=false</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">context-path:</span> <span class="hljs-string">/shell</span> <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel 5.5 新特性</title>
    <link href="/2017/10/13/Laravel-5-5%E5%AE%9E%E7%94%A8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2017/10/13/Laravel-5-5%E5%AE%9E%E7%94%A8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/a87o2v5353250951325.jpg"></p><h5 id="Responsable-响应接口"><a href="#Responsable-响应接口" class="headerlink" title="Responsable 响应接口"></a>Responsable 响应接口</h5><span id="more"></span><p>可以实现接口响应，一般路由请求加载视图模板，若是ajax请求时返回json数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewSongResponse</span>(<span class="hljs-variable">$song</span>);   <span class="hljs-comment">//在返回数据加载视图是交给NewSongResponse处理</span><br><br></code></pre></td></tr></table></figure><p>NewSongResponse 会判断处理是返回json数据还是加载模板</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Http</span>\<span class="hljs-title class_">Responses</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">App</span>\<span class="hljs-title">Song</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">Responsable</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NewSongResponse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Responsable</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@var</span> \App\Song</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$song</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> \App\Song $song</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">Song <span class="hljs-variable">$song</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>       <span class="hljs-variable language_">$this</span>-&gt;song = <span class="hljs-variable">$song</span>; <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toResponse</span>(<span class="hljs-params"><span class="hljs-variable">$request</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">wantsJson</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">response</span>()<br>                -&gt;<span class="hljs-title function_ invoke__">json</span>(<span class="hljs-variable">$this</span>-&gt;song)<br>                -&gt;<span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location&#x27;</span>, <span class="hljs-title function_ invoke__">route</span>(<span class="hljs-string">&#x27;songs.show&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;song))<br>                -&gt;<span class="hljs-title function_ invoke__">setStatusCode</span>(<span class="hljs-number">201</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>()<br>            -&gt;<span class="hljs-title function_ invoke__">route</span>(<span class="hljs-string">&#x27;songs.show&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;song);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="请求验证的简化"><a href="#请求验证的简化" class="headerlink" title="请求验证的简化"></a>请求验证的简化</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">request</span>()-&gt;<span class="hljs-title function_ invoke__">validate</span>([<br>    <span class="hljs-string">&#x27;title&#x27;</span> =&gt; <span class="hljs-string">&#x27;required&#x27;</span>,<br>    <span class="hljs-string">&#x27;artist&#x27;</span> =&gt; <span class="hljs-string">&#x27;required&#x27;</span>,<br>    <span class="hljs-string">&#x27;description&#x27;</span> =&gt; <span class="hljs-string">&#x27;required&#x27;</span>,<br>    <span class="hljs-string">&#x27;duration&#x27;</span> =&gt; <span class="hljs-string">&#x27;required|numeric&#x27;</span>,<br>    <span class="hljs-string">&#x27;released_on&#x27;</span> =&gt; <span class="hljs-string">&#x27;required|date_format:Y-m-d&#x27;</span>,<br>    <span class="hljs-string">&#x27;gold&#x27;</span> =&gt; <span class="hljs-string">&#x27;boolean&#x27;</span>,<br>    <span class="hljs-string">&#x27;platinum&#x27;</span> =&gt; <span class="hljs-string">&#x27;boolean&#x27;</span>,<br>]);<br><span class="hljs-comment">//只有通过验证和在validdate中存在的字段才会获取，将请求验证和获取合二而一</span><br></code></pre></td></tr></table></figure><h5 id="新添加的模板指令-关于用户验证模块"><a href="#新添加的模板指令-关于用户验证模块" class="headerlink" title="新添加的模板指令 关于用户验证模块"></a>新添加的模板指令 关于用户验证模块</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">@auth<br>    Welcome &#123;&#123; <span class="hljs-title function_ invoke__">user</span>()-&gt;name &#125;&#125;!<br>@endauth<br><br>@guest<br>    Welcome Guest!<br>@endguest<br></code></pre></td></tr></table></figure><h6 id="新添加的artisan命令"><a href="#新添加的artisan命令" class="headerlink" title="新添加的artisan命令"></a>新添加的artisan命令</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php artisan make:model -fm Post     <span class="hljs-comment">//创建工厂文件</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php artisan make:model --all    <span class="hljs-comment">//同时创建控制器 迁移文件 工厂文件</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php artisan migrate:fresh   <span class="hljs-comment">//删除库中所有表并重新迁移</span><br></code></pre></td></tr></table></figure><h5 id="在collection中可以直接使用dd-和dump-打印"><a href="#在collection中可以直接使用dd-和dump-打印" class="headerlink" title="在collection中可以直接使用dd()和dump()打印"></a>在collection中可以直接使用dd()和dump()打印</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">collect</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])-&gt;<span class="hljs-title function_ invoke__">map</span>(function(<span class="hljs-variable">$i</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$i</span> * <span class="hljs-number">2</span>;<br>&#125;)-&gt;<span class="hljs-title function_ invoke__">dd</span>()-&gt;<span class="hljs-title function_ invoke__">reject</span>(function(<span class="hljs-variable">$i</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">3</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="resource生成資源，代替transform"><a href="#resource生成資源，代替transform" class="headerlink" title="resource生成資源，代替transform"></a>resource生成資源，代替transform</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">php artisan make:resource User                   <span class="hljs-comment">//创建资源</span><br>php artisan make:resource Users --collection     <span class="hljs-comment">//创建资源集合</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span>(<span class="hljs-params"><span class="hljs-variable">$request</span></span>)     //在资源中处理</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> [<br>            <span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;id,<br>            <span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;name,<br>            <span class="hljs-string">&#x27;email&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;email,<br>            <span class="hljs-string">&#x27;created_at&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;created_at,<br>            <span class="hljs-string">&#x27;updated_at&#x27;</span> =&gt; <span class="hljs-variable language_">$this</span>-&gt;updated_at,<br>        ];<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">Route</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, function () &#123;     <span class="hljs-comment">//数据返回时交给资源处理</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserResource</span>(<span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">find</span>(<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">UserResource</span>::<span class="hljs-title function_ invoke__">collection</span>(<span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">all</span>());<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="新的路由方法"><a href="#新的路由方法" class="headerlink" title="新的路由方法"></a>新的路由方法</h5><p>路由重定向</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">Route</span>::<span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/here&#x27;</span>, <span class="hljs-string">&#x27;/there&#x27;</span>, <span class="hljs-number">301</span>);<br></code></pre></td></tr></table></figure><p>返回视图   第三个参数可以返回参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">Route</span>::<span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;/welcome&#x27;</span>, <span class="hljs-string">&#x27;welcome&#x27;</span>);<br><br><span class="hljs-title class_">Route</span>::<span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;/welcome&#x27;</span>, <span class="hljs-string">&#x27;welcome&#x27;</span>, [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-string">&#x27;Taylor&#x27;</span>]);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>laravel中的Excel文件导入与导出</title>
    <link href="/2017/09/30/laravel%E4%B8%AD%E7%9A%84Excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/"/>
    <url>/2017/09/30/laravel%E4%B8%AD%E7%9A%84Excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/devon-wilson-1500588-unsplash.jpg"></p><h5 id="主要利用第三方包完成文件上Excel上传数据与下载生成Excel"><a href="#主要利用第三方包完成文件上Excel上传数据与下载生成Excel" class="headerlink" title="主要利用第三方包完成文件上Excel上传数据与下载生成Excel"></a>主要利用第三方包完成文件上Excel上传数据与下载生成Excel</h5><blockquote><p>github 包地址<a href="https://github.com/Maatwebsite/Laravel-Excel">Maatwebsite&#x2F;Laravel-Excel</a></p></blockquote><ul><li>安装</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">composer</span> <span class="hljs-meta">require</span> <span class="hljs-string">&quot;maatwebsite/excel:~2.1.0&quot;</span><br></code></pre></td></tr></table></figure><ul><li>添加ServiceProvider和aliases</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Maatwebsite\Excel\ExcelServiceProvider::<span class="hljs-keyword">class</span>,<br><br>&#x27;<span class="hljs-symbol">Excel</span>&#x27; =&gt; <span class="hljs-symbol">Maatwebsite</span>\<span class="hljs-symbol">Excel</span>\<span class="hljs-symbol">Facades</span>\<span class="hljs-symbol">Excel::<span class="hljs-symbol">class</span>,</span><br></code></pre></td></tr></table></figure><ul><li>生成配置文件</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">php artisan vendor<span class="hljs-function">:publish</span> <span class="hljs-params">--provider=</span><span class="hljs-string">&quot;Maatwebsite\Excel\ExcelServiceProvider&quot;</span><br></code></pre></td></tr></table></figure><h5 id="获取上传Excel数据"><a href="#获取上传Excel数据" class="headerlink" title="获取上传Excel数据"></a>获取上传Excel数据</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$value</span> = Excel::load(<span class="hljs-variable">$file</span>, <span class="hljs-keyword">function</span> (<span class="hljs-variable">$reader</span>) &#123;<br>    <span class="hljs-variable">$results</span> = <span class="hljs-variable">$reader</span>-&gt;get();    <span class="hljs-regexp">//</span>获取所有<br>    <span class="hljs-variable">$results</span> = <span class="hljs-variable">$reader</span>-&gt;all();    <span class="hljs-regexp">//</span>获取所有<br>    <span class="hljs-variable">$row</span>-&gt;firstname;             <span class="hljs-regexp">//</span>获取第一行用作属性<br>    <span class="hljs-variable">$reader</span>-&gt;first();         <span class="hljs-regexp">//</span>获取第一行<br>    <span class="hljs-variable">$reader</span>-&gt;getTitle();       <span class="hljs-regexp">//</span>获取工作表标题<br>    <span class="hljs-variable">$reader</span>-&gt;takeRows(<span class="hljs-number">10</span>);     <span class="hljs-regexp">//</span>获取某一行<br>    <span class="hljs-variable">$reader</span>-&gt;limitRows(<span class="hljs-number">10</span>);    <span class="hljs-regexp">//</span>获取某一行<br>    <span class="hljs-variable">$reader</span>-&gt;skipRows(<span class="hljs-number">10</span>);      <span class="hljs-regexp">//</span>跳过某一行<br>    <span class="hljs-variable">$reader</span>-&gt;takeColumns(<span class="hljs-number">10</span>);   <span class="hljs-regexp">//</span>获取某一列<br>    <span class="hljs-variable">$reader</span>-&gt;skipColumns(<span class="hljs-number">10</span>);    <span class="hljs-regexp">//</span>跳过某一列<br>    <span class="hljs-variable">$reader</span>-&gt;toArray();          <span class="hljs-regexp">//</span>将结果转化成数组<br>    <span class="hljs-variable">$reader</span>-&gt;toObject();          <span class="hljs-regexp">//</span>将结果转化成对象<br>    <span class="hljs-variable">$reader</span>-&gt;each(<span class="hljs-keyword">function</span>(<span class="hljs-variable">$sheet</span>) &#123;<br>        <span class="hljs-regexp">//</span> 对所有行进行迭代<br>        <span class="hljs-variable">$sheet</span>-&gt;each(<span class="hljs-keyword">function</span>(<span class="hljs-variable">$row</span>) &#123;<br><br>        &#125;);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="生成Excel并下载到本地"><a href="#生成Excel并下载到本地" class="headerlink" title="生成Excel并下载到本地"></a>生成Excel并下载到本地</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">Excel::create(<span class="hljs-variable">$name</span>,<span class="hljs-keyword">function</span>(<span class="hljs-variable">$excel</span>) use (<span class="hljs-variable">$cellData</span>)&#123;<br>            <span class="hljs-variable">$excel</span>-&gt;sheet(<span class="hljs-string">&#x27;sheet1&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-variable">$sheet</span>) use (<span class="hljs-variable">$cellData</span>)&#123;<br><span class="hljs-regexp">//</span>                <span class="hljs-variable">$sheet</span>-&gt;rows(<span class="hljs-variable">$cellData</span>);     <span class="hljs-regexp">//</span>将数组的每一行对应些人Excel每一行<br>                <span class="hljs-variable">$sheet</span>-&gt;fromArray(<span class="hljs-variable">$cellData</span>);  <span class="hljs-regexp">//</span>将查询数据的数据库字段名作为表头存放在第一行<br>            &#125;);<br>        &#125;)-&gt;export(<span class="hljs-string">&#x27;xls&#x27;</span>);<br></code></pre></td></tr></table></figure><p>laravel中获取表的表字段</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">protected</span> function getColumns(<span class="hljs-variable">$table</span>)<br>    &#123;<br>        <span class="hljs-variable">$columns</span> = <span class="hljs-title class_">Schema</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:getColumnListing</span>(<span class="hljs-variable">$table</span>);<br><span class="hljs-regexp">//</span>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;selectGetColumns(<span class="hljs-variable">$columns</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$columns</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>详细可以看文档<a href="http://www.maatwebsite.nl/laravel-excel/docs">Laravel Excel</a>,在文件上传时一般都会验证字段或者验证上传是否为空，生成下载文件的时候选择只下载那几行，还有对数据的迭代和生成表头等等！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础学习--数据类型</title>
    <link href="/2017/09/17/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2017/09/17/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/guillaume-bolduc.jpg"></p><span id="more"></span><ul><li><p>Python中处理整数和浮点数和其他语言中基本没有差别<br>整数的运算永远都是精确的，而浮点数因为四舍五入可能存在误差</p></li><li><p>Python中的字符串可以使用’’或者””,两者没有区别<br>引号只是字符串的表示方式，并不是字符串的一部分<br>字符串中转义用\   \n换行  \t表示制表符 \若要显示也需要转义<br>若存在很多换行可使用’’’XXXXXX’’’,里面正常换行书写，无需书写\n</p></li><li><p>布尔值True  False Python严格区分大小写<br>布尔值运算使用 and  or  not</p></li><li><p>空值   用None表示</p></li><li><p>变量  变量名必须是大小写英文字母数字和_的组合，不能以数字开头<br>Python属于动态语言(变量本身类型不固定),变量值可以是任意数据类型<br>Python中的变量其实是讲一个变量名指向一个内存中创建的值，如果改变这个变量的值<br>并不是改变原先的变量值，而是变量名指向一个新建的值，原先的值并没有改变</p></li><li><p>常量 常量其实就是值一般不会改变的变量，他的值还是可以改变的，常量一般大写表示<br>Python中的两种除法<br>&#x2F;   结果永远是浮点数，即使整除也是用浮点数显示<br>&#x2F;&#x2F;  结果是整数，除不尽时只去整数部分，不是四舍五入</p></li><li><p>有序集合list和tuple</p></li><li><p>list用[]表示，和PHP中的数组类似，可以用len()得到长度，索引从0开始<br>在list末尾添加一个元素names.append(‘Andrew’)<br>添加到指定位置names.insert(1,’Andrew’)<br>删除list末尾的元素names.pop()  返回删除值<br>删除指定位置元素names.pop(1)<br>更改某个元素的值names[1] &#x3D; ‘Andrew’<br>list元素也可以是一个list names[‘xxx’,[‘xxx’,’xxxxx’]]</p></li><li><p>tuple和list类似，用()表示，但是一旦初始化就不能修改<br>  除了append() insert()之外其他list的方法基本都可以适用于tuple</p></li><li><p>定义一个空的tuple可以是t &#x3D; ()<br>但是如果tuple 只有一个元素就必须是t &#x3D; (‘xxx’,)</p></li><li><p>tuple里面的元素也可以是一个list<br>例如test(‘xx’,’xxx’,[‘aa’,’bb’])<br>test[2][0] &#x3D; ‘AAA’这样就改变了test的值，这里并不是tuple的值可以改变了，这里的改变<br>是指tuple每个元素的指向不变，这里变化的之后是test[2]的指向而已</p></li><li><p>键值存储dict和set</p></li><li><p>字典dict，用{}表示，dict的key必须是不可变的对象，所以不可以是list，而字符串和整数则可以。dict是无序的，查询速度比list快，dict的数据变大并不影响查询速度，而list越大查找越慢，但是dict是存在内存中的，所以比list更好空间<br>dict中心加入值 d[‘name’] &#x3D; ‘Andrew’,如果该键已存在值将会覆盖</p></li><li><p>查找dict中key是否存在 d.get(‘name’)  如果不存在怎返回None,None在交互命令中不显示结果，也可以指定不存在时的返回d.get(‘name’,-1),不存在时返回-1</p></li><li><p>删除指定key  d.pop(‘name’)</p></li><li><p>set和dict类似也是，但set之存储key，不存储value，set是无序的</p></li><li><p>set中重复的key会被过滤，key必须是唯一的，不可变的 </p></li><li><p>可以通过s.add(‘name’)添加key  s.remove(‘name’)删除key</p></li><li><p>可以将set看作数学中无序的不重复的集合，所以可以对set进行交集、并集运算<br>  s1 &#x3D; set([1,2,3])<br>  s2 &#x3D; set([3,4,5])<br>  s1 &amp; s2 &#x3D; {3}   s1 | s2 &#x3D; {1,2,3,4,5}</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在laravel中引入ueditor富文本编辑器且简化编辑器和引入&#39;Editor.md&#39;laravel扩展</title>
    <link href="/2017/08/05/%E5%9C%A8laravel%E4%B8%AD%E5%BC%95%E5%85%A5ueditor%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%94%E7%AE%80%E5%8C%96%E7%BC%96%E8%BE%91%E5%99%A8%E5%92%8C%E5%BC%95%E5%85%A5-Editor-md-laravel%E6%89%A9%E5%B1%95/"/>
    <url>/2017/08/05/%E5%9C%A8laravel%E4%B8%AD%E5%BC%95%E5%85%A5ueditor%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%94%E7%AE%80%E5%8C%96%E7%BC%96%E8%BE%91%E5%99%A8%E5%92%8C%E5%BC%95%E5%85%A5-Editor-md-laravel%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/sanjoy-saha-1488012-unsplash.jpg"></p><h5 id="ueditor富文本编辑"><a href="#ueditor富文本编辑" class="headerlink" title="ueditor富文本编辑"></a>ueditor富文本编辑</h5><span id="more"></span><h6 id="首先引入安正超的laravel-ueditor包"><a href="#首先引入安正超的laravel-ueditor包" class="headerlink" title="首先引入安正超的laravel-ueditor包"></a>首先引入安正超的laravel-ueditor包</h6><ul><li><p>利用composer安装<br>  composer require “overtrue&#x2F;laravel-ueditor:~1.0”</p></li><li><p>添加下面一行到 config&#x2F;app.php 中 providers 部分</p><p>  Overtrue\LaravelUEditor\UEditorServiceProvider::class,</p></li><li><p>发布配置文件与资源<br>  php artisan vendor:publish –provider&#x3D;’Overtrue\LaravelUEditor\UEditorServiceProvider’</p></li><li><p>模板引入编辑器<br>@include(‘vendor.ueditor.assets’) 这行的作用是引入编辑器需要的 css,js 等文件，所以你不需要再手动去引入它们。</p></li><li><p>编辑器的初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- 实例化编辑器 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> ue = <span class="hljs-variable constant_">UE</span>.<span class="hljs-title function_">getEditor</span>(<span class="hljs-string">&#x27;container&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  ue.<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      ue.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;serverparam&#x27;</span>, <span class="hljs-string">&#x27;_token&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#123; csrf_token() &#125;&#125;&#x27;</span>); <span class="hljs-comment">// 设置 CSRF token.</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;!-- 编辑器容器 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/plain&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>至此编辑器引用完后，接下来就是简化编辑器</p></li></ul><h5 id="利用-JellyBool-simple-ueditor包简化编辑器"><a href="#利用-JellyBool-simple-ueditor包简化编辑器" class="headerlink" title="利用 JellyBool simple-ueditor包简化编辑器"></a>利用 JellyBool <a href="https://github.com/JellyBool/simple-ueditor">simple-ueditor包</a>简化编辑器</h5><ul><li>在github拉去代码<br>  git clone <a href="https://github.com/JellyBool/simple-ueditor.git">https://github.com/JellyBool/simple-ueditor.git</a></li><li>将下载的ueditor文件整个覆盖项目目录下public-&gt;vendor-&gt;ueditor目录</li><li>在实例化编辑器的时候加入以下参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ue = <span class="hljs-variable constant_">UE</span>.<span class="hljs-title function_">getEditor</span>(<span class="hljs-string">&#x27;editor&#x27;</span>, &#123;<br>   <span class="hljs-attr">toolbars</span>: [<br>           [<span class="hljs-string">&#x27;bold&#x27;</span>, <span class="hljs-string">&#x27;italic&#x27;</span>, <span class="hljs-string">&#x27;underline&#x27;</span>, <span class="hljs-string">&#x27;strikethrough&#x27;</span>, <span class="hljs-string">&#x27;blockquote&#x27;</span>, <span class="hljs-string">&#x27;insertunorderedlist&#x27;</span>, <span class="hljs-string">&#x27;insertorderedlist&#x27;</span>, <span class="hljs-string">&#x27;justifyleft&#x27;</span>,<span class="hljs-string">&#x27;justifycenter&#x27;</span>, <span class="hljs-string">&#x27;justifyright&#x27;</span>,  <span class="hljs-string">&#x27;link&#x27;</span>, <span class="hljs-string">&#x27;insertimage&#x27;</span>, <span class="hljs-string">&#x27;fullscreen&#x27;</span>]<br>       ],<br>   <span class="hljs-attr">elementPathEnabled</span>: <span class="hljs-literal">false</span>,<br>   <span class="hljs-attr">enableContextMenu</span>: <span class="hljs-literal">false</span>,<br>   <span class="hljs-attr">autoClearEmptyNode</span>:<span class="hljs-literal">true</span>,<br>   <span class="hljs-attr">wordCount</span>:<span class="hljs-literal">false</span>,<br>   <span class="hljs-attr">imagePopup</span>:<span class="hljs-literal">false</span>,<br>   <span class="hljs-attr">autotypeset</span>:&#123; <span class="hljs-attr">indent</span>: <span class="hljs-literal">true</span>,<span class="hljs-attr">imageBlockLine</span>: <span class="hljs-string">&#x27;center&#x27;</span> &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>toolbars主要是定义工具栏选项的，可以修改public-&gt;vendor-&gt;ueditor下的ueditor.config.js文件来<br>配置自己需要的工具或者配置自己喜欢的初始样式！例如更改初始的编辑器大小<br><a href="http://omt7mlk6g.bkt.clouddn.com/ueditor.png">ueditor</a><br><a href="http://omt7mlk6g.bkt.clouddn.com/ueditor_show.png">ueditor</a></li></ul><h5 id="Editor-md-Markdown编辑器"><a href="#Editor-md-Markdown编辑器" class="headerlink" title="Editor.md Markdown编辑器"></a>Editor.md Markdown编辑器</h5><p>直接安装<a href="https://github.com/LaravelChen/laravel-editormd">LaravelChen&#x2F;laravel-editormd包</a><br>用composer安装扩展</p><pre><code class="hljs">composer require laravelchen/laravel-editormd</code></pre><p>然后在config&#x2F;app.php添加provider</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;providers&#x27;</span> =&gt; [<br>    <span class="hljs-title class_">LaravelChen</span>\<span class="hljs-title class_">Editormd</span>\<span class="hljs-title class_">EditorMdProvider</span>::<span class="hljs-keyword">class</span>,<br>   ];<br></code></pre></td></tr></table></figure><p>可以在Editor.md配置文件(config&#x2F;editormd.php)中设置默认配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;?php<br><span class="hljs-keyword">return</span> [<br>    <span class="hljs-string">&#x27;width&#x27;</span>=&gt;<span class="hljs-string">&#x27;100%&#x27;</span>,<span class="hljs-comment">//宽度建议100%</span><br>    <span class="hljs-string">&#x27;height&#x27;</span>=&gt;<span class="hljs-string">&#x27;700&#x27;</span>,<span class="hljs-comment">//高度</span><br>    <span class="hljs-string">&#x27;theme&#x27;</span>=&gt;<span class="hljs-string">&#x27;default&#x27;</span>,<span class="hljs-comment">//顶部的主题分为default和dark</span><br>    <span class="hljs-string">&#x27;editorTheme&#x27;</span>=&gt;<span class="hljs-string">&#x27;default&#x27;</span>,<span class="hljs-comment">//显示区域的主题分为default和pastel-on-dark 注:如果想要配置其他主题，请参考vendor/editormd/lib/theme目录下的css文件</span><br>    <span class="hljs-string">&#x27;previewTheme&#x27;</span>=&gt;<span class="hljs-string">&#x27;default&#x27;</span>,<span class="hljs-comment">//编辑区域的主题分为default,dark,</span><br>    <span class="hljs-string">&#x27;flowChart&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//流程图</span><br>    <span class="hljs-string">&#x27;tex&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//开启科学公式TeX语言支持</span><br>    <span class="hljs-string">&#x27;searchReplace&#x27;</span>=&gt;<span class="hljs-string">&#x27;true&#x27;</span>,<span class="hljs-comment">//搜索替换</span><br>    <span class="hljs-string">&#x27;saveHTMLToTextarea&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//保存 HTML 到 Textarea</span><br>    <span class="hljs-string">&#x27;codeFold&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//代码折叠</span><br>    <span class="hljs-string">&#x27;emoji&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//emoji表情</span><br>    <span class="hljs-string">&#x27;toc&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//目录</span><br>    <span class="hljs-string">&#x27;tocm&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//目录下拉菜单</span><br>    <span class="hljs-string">&#x27;taskList&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//任务列表</span><br>    <span class="hljs-string">&#x27;imageUpload&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//图片本地上传支持</span><br>    <span class="hljs-string">&#x27;sequenceDiagram&#x27;</span> =&gt; <span class="hljs-string">&#x27;true&#x27;</span>,  <span class="hljs-comment">//开启时序/序列图支持</span><br>];<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;<br>    &lt;link href=&quot;//cdn.bootcss.com/bootstrap/3.3.6/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;<br>    &#123;!! editor_css() !!&#125;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div class=&quot;container&quot;&gt;<br>    &lt;div class=&quot;col-md-12&quot; style=&quot;margin-top: 50px&quot;&gt;<br>        &lt;div id=&quot;editormd_id&quot;&gt;<br>            &lt;textarea name=&quot;content&quot; style=&quot;display:none;&quot;&gt;&lt;/textarea&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;script src=&quot;//cdn.bootcss.com/jquery/2.1.0/jquery.min.js&quot;&gt;&lt;/script&gt;<br>&#123;!! editor_js() !!&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>页面呈现<br><a href="http://omt7mlk6g.bkt.clouddn.com/Editor.md.png">Editor.md</a></p><ul><li>详情参考<a href="https://github.com/LaravelChen/laravel-editormd">LaravelChen&#x2F;laravel-editormd</a></li></ul><h6 id="在blade模板中渲染"><a href="#在blade模板中渲染" class="headerlink" title="在blade模板中渲染"></a>在blade模板中渲染</h6><ul><li>引用<a href="https://github.com/maxhoffmann/parsedown-laravel">maxhoffmann&#x2F;parsedown-laravel</a></li></ul><p>在composer.json中require<br>    “maxhoffmann&#x2F;parsedown-laravel”: “dev-master”</p><p>执行 composer update<br>在config&#x2F;app.php中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;providers&#x27;</span> =&gt; <span class="hljs-title function_">array</span>(<br><span class="hljs-title class_">MaxHoffmann</span>\<span class="hljs-title class_">Parsedown</span>\<span class="hljs-title class_">ParsedownServiceProvider</span>::<span class="hljs-keyword">class</span>,<br>),<br><span class="hljs-string">&#x27;aliases&#x27;</span> =&gt; <span class="hljs-title function_">array</span>(<br><span class="hljs-string">&#x27;Markdown&#x27;</span>  =&gt; <span class="hljs-title class_">MaxHoffmann</span>\<span class="hljs-title class_">Parsedown</span>\<span class="hljs-title class_">ParsedownFacade</span>::<span class="hljs-keyword">class</span>,<br>),<br></code></pre></td></tr></table></figure><p>在模板中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;mailbox-read-message text-center&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;!! Markdown::parse($article-&gt;body) !!&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何将上传图片实时上传到七牛</title>
    <link href="/2017/06/19/%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%AE%9E%E6%97%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%83%E7%89%9B/"/>
    <url>/2017/06/19/%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%AE%9E%E6%97%B6%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%83%E7%89%9B/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/video.jpg"><br>图片实时上传到七牛可以很大程度上减轻服务器的压力，<br>我这里使用的是安正超的package<a href="https://github.com/overtrue/laravel-filesystem-qiniu">overtrue&#x2F;laravel-filesystem-qiniu</a>,亲测效果很棒！</p><span id="more"></span><p>首先安装package</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer require &quot;overtrue/laravel-filesystem-qiniu&quot; -vvv<br></code></pre></td></tr></table></figure><ul><li>添加配置config&#x2F;app.php<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-string">&#x27;providers&#x27;</span> =&gt; [<br>    <span class="hljs-comment">// Other service providers...</span><br>    <span class="hljs-title class_">Overtrue</span>\<span class="hljs-title class_">LaravelFilesystem</span>\<span class="hljs-title class_">Qiniu</span>\<span class="hljs-title class_">QiniuStorageServiceProvider</span>::<span class="hljs-keyword">class</span>,<br>],<br></code></pre></td></tr></table></figure></li><li>添加七牛disks配置 config&#x2F;filesystems.php 此处是将七牛配置放在.env文件中,通过env函数获取,方便修改</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;qiniu&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;driver&#x27;</span>     =&gt; <span class="hljs-string">&#x27;qiniu&#x27;</span>,<br>            <span class="hljs-string">&#x27;access_key&#x27;</span> =&gt; <span class="hljs-title function_">env</span>(<span class="hljs-string">&#x27;QINIU_ACCESS_KEY&#x27;</span>),<br>            <span class="hljs-string">&#x27;secret_key&#x27;</span> =&gt; <span class="hljs-title function_">env</span>(<span class="hljs-string">&#x27;QINIU_SECRET_KEY&#x27;</span>),<br>            <span class="hljs-string">&#x27;bucket&#x27;</span>     =&gt; <span class="hljs-title function_">env</span>(<span class="hljs-string">&#x27;QINIU_BUCKET_NAME&#x27;</span>),<br>            <span class="hljs-string">&#x27;domain&#x27;</span>     =&gt; <span class="hljs-title function_">env</span>(<span class="hljs-string">&#x27;QINIU_BUCKET_DOMAIN&#x27;</span>),<br>        ],<br></code></pre></td></tr></table></figure><ul><li>在.env中的配置</li></ul><p>QINIU_BUCKET_NAME &#x3D; 储存空间名称<br>QINIU_BUCKET_DOMAIN &#x3D; 外链默认域名<br>QINIU_ACCESS_KEY &#x3D;你的AccessKey<br>QINIU_SECRET_KEY &#x3D; 你的SecretKey</p><ul><li>上传文件是的操作，这里以上产单张图片为例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">$disk = <span class="hljs-title class_">Storage</span>::<span class="hljs-title function_">disk</span>(<span class="hljs-string">&#x27;qiniu&#x27;</span>);<br>$file = $request-&gt;<span class="hljs-title function_">file</span>(<span class="hljs-string">&#x27;photo&#x27;</span>);    <span class="hljs-comment">//获取上传图片信息</span><br>$pre_path = <span class="hljs-title function_">date</span>(<span class="hljs-string">&#x27;Y&#x27;</span>).<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_">date</span>(<span class="hljs-string">&#x27;m&#x27;</span>).<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_">date</span>(<span class="hljs-string">&#x27;d&#x27;</span>);  <span class="hljs-comment">//设置图片储存前缀</span><br>$fileName = <span class="hljs-string">&#x27;photo/&#x27;</span>.<span class="hljs-property">$pre_path</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_">md5</span>(<span class="hljs-title function_">time</span>()).<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-property">$file</span>-&gt;<span class="hljs-title function_">getClientOriginalExtension</span>();  <span class="hljs-comment">//拼接图片路径、后缀</span><br>$disk-&gt;<span class="hljs-title function_">writeStream</span>($fileName,<span class="hljs-title function_">fopen</span>($file-&gt;<span class="hljs-title function_">getRealPath</span>(),<span class="hljs-string">&#x27;r&#x27;</span>));   <span class="hljs-comment">//储存到七牛</span><br>$photo = <span class="hljs-string">&#x27;http://&#x27;</span>.<span class="hljs-title function_">config</span>(<span class="hljs-string">&#x27;filesystems.disks.qiniu.domain&#x27;</span>).<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-property">$fileName</span>;    <span class="hljs-comment">//获取图片的外部访问链接存入数据库</span><br>$exists = $disk-&gt;<span class="hljs-title function_">has</span>($fileName);   <span class="hljs-comment">//检查图片路径是否在七牛存在</span><br>$disk-&gt;<span class="hljs-title function_">delete</span>($fileName);    <span class="hljs-comment">//删除七牛存储</span><br></code></pre></td></tr></table></figure></li></ul><p>安正超<a href="https://github.com/overtrue/laravel-filesystem-qiniu">overtrue&#x2F;laravel-filesystem-qiniu</a>列出的一些方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">$disk = <span class="hljs-title class_">Storage</span>::<span class="hljs-title function_">disk</span>(<span class="hljs-string">&#x27;qiniu&#x27;</span>);<br><span class="hljs-comment">// create a file</span><br>$disk-&gt;<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;avatars/1&#x27;</span>, $fileContents);<br><span class="hljs-comment">// check if a file exists</span><br>$exists = $disk-&gt;<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;file.jpg&#x27;</span>);<br><span class="hljs-comment">// get timestamp</span><br>$time = $disk-&gt;<span class="hljs-title function_">lastModified</span>(<span class="hljs-string">&#x27;file1.jpg&#x27;</span>);<br>$time = $disk-&gt;<span class="hljs-title function_">getTimestamp</span>(<span class="hljs-string">&#x27;file1.jpg&#x27;</span>);<br><span class="hljs-comment">// copy a file</span><br>$disk-&gt;<span class="hljs-title function_">copy</span>(<span class="hljs-string">&#x27;old/file1.jpg&#x27;</span>, <span class="hljs-string">&#x27;new/file1.jpg&#x27;</span>);<br><span class="hljs-comment">// move a file</span><br>$disk-&gt;<span class="hljs-title function_">move</span>(<span class="hljs-string">&#x27;old/file1.jpg&#x27;</span>, <span class="hljs-string">&#x27;new/file1.jpg&#x27;</span>);<br><span class="hljs-comment">// get file contents</span><br>$contents = $disk-&gt;<span class="hljs-title function_">read</span>(<span class="hljs-string">&#x27;folder/my_file.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p><strong>更多方法参考<a href="http://flysystem.thephpleague.com/api/">Full API documentation</a></strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置自己舒适的phpstorm主题配色</title>
    <link href="/2017/05/26/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E8%88%92%E9%80%82%E7%9A%84phpstorm%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2/"/>
    <url>/2017/05/26/%E9%85%8D%E7%BD%AE%E8%87%AA%E5%B7%B1%E8%88%92%E9%80%82%E7%9A%84phpstorm%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/min-wu-01.jpg"></p><h5 id="设置自己舒适的编辑习惯安装插件EditorConfig"><a href="#设置自己舒适的编辑习惯安装插件EditorConfig" class="headerlink" title="设置自己舒适的编辑习惯安装插件EditorConfig"></a>设置自己舒适的编辑习惯安装插件EditorConfig</h5><p>Ctrl + Shift + A 调出plugins窗口,搜索EditorConfig安装</p><span id="more"></span><p><a href="http://omt7mlk6g.bkt.clouddn.com/phpstorm01.png">phpstorm</a></p><h5 id="安装主题插件"><a href="#安装主题插件" class="headerlink" title="安装主题插件"></a>安装主题插件</h5><p>同样打开plugins窗口搜索material-theme安装,然后在setting-&gt;Editor-&gt;Font设置<br><a href="http://omt7mlk6g.bkt.clouddn.com/phpstorm02.png">phpstorm</a></p><h5 id="安装Color-IDE插件同步Sidebar背景样式和主题一致"><a href="#安装Color-IDE插件同步Sidebar背景样式和主题一致" class="headerlink" title="安装Color IDE插件同步Sidebar背景样式和主题一致"></a>安装Color IDE插件同步Sidebar背景样式和主题一致</h5><p><a href="http://omt7mlk6g.bkt.clouddn.com/phpstorm03.png">phpstorm</a><br>然后重启编辑器就可以啦！！！</p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PhpStorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel5.3之后新增模板指令以及全局的cache()函数</title>
    <link href="/2017/05/22/Laravel5-3%E4%B9%8B%E5%90%8E%E6%96%B0%E5%A2%9E%E6%A8%A1%E6%9D%BF%E6%8C%87%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%80%E7%9A%84cache-%E5%87%BD%E6%95%B0/"/>
    <url>/2017/05/22/Laravel5-3%E4%B9%8B%E5%90%8E%E6%96%B0%E5%A2%9E%E6%A8%A1%E6%9D%BF%E6%8C%87%E4%BB%A4%E4%BB%A5%E5%8F%8A%E5%85%A8%E5%B1%80%E7%9A%84cache-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/chuttersnap-368037-unsplash.jpg"></p><h5 id="在laravel中模板渲染一般使用-if和-foreach-在5-3之后，laravel有新增一个-loop变量"><a href="#在laravel中模板渲染一般使用-if和-foreach-在5-3之后，laravel有新增一个-loop变量" class="headerlink" title="在laravel中模板渲染一般使用$if和$foreach,在5.3之后，laravel有新增一个$loop变量"></a>在laravel中模板渲染一般使用$if和$foreach,在5.3之后，laravel有新增一个$loop变量</h5><span id="more"></span><ul><li>index：从1开始的循环索引，1意味着是第一个条目。</li><li>remaining：循环还有多少个条目，比如当前是3个中的第一个，那么会返回2；</li><li>count：循环总条目数</li><li>first：是否是第一个</li><li>last：是否是最后一个</li><li>depth：循环的层级</li><li>parent：如果循环位于另一个@foreach中，返回父循环引用，否则返回null<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">如果有嵌套循环，可以使用depth判断，并且通过$loop的parent属性获取相应信息：<br>&lt;ul&gt;<br>    @foreach ($pages <span class="hljs-keyword">as</span> $page)<br>        &lt;li&gt;&#123;&#123; $loop-&gt;index &#125;&#125;: &#123;&#123; $page-&gt;title &#125;&#125;<br>        @<span class="hljs-keyword">if</span> ($page-&gt;<span class="hljs-title function_">hasChildren</span>())<br>        &lt;ul&gt;<br>            @foreach ($page-&gt;<span class="hljs-title function_">children</span>() <span class="hljs-keyword">as</span> $child)<br>                &lt;li&gt;&#123;&#123; $loop-&gt;parent-&gt;index &#125;&#125;.&#123;&#123; $loop-&gt;index &#125;&#125;:<br>                &#123;&#123; $child-&gt;title &#125;&#125;&lt;/li&gt;<br>            @endforeach<br>        &lt;/ul&gt;<br>        @endif<br>    &lt;/li&gt;<br>    @endforeach<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure></li></ul><h5 id="和session一样cache函数也有三种用法"><a href="#和session一样cache函数也有三种用法" class="headerlink" title="和session一样cache函数也有三种用法"></a>和session一样cache函数也有三种用法</h5><ul><li>cache(‘a’, null)获取abc对应的缓存值，如果没有的话返回null</li><li>cache([‘b’ &#x3D;&gt; ‘Laravel’], 5)用于设置缓存值，有效期为5分钟</li><li>cache()则会返回CacheManager的实例<br>  同样第三种用法意味着你可以使用类似 cache()-&gt;forever()这样的方法来替代 Cache::forever()，当然还可以调用许多其他函数，你可以自行进行测试。</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Laravel中使用Carbon类显示人性化时间隔断</title>
    <link href="/2017/05/09/%E5%9C%A8Laravel%E4%B8%AD%E4%BD%BF%E7%94%A8Carbon%E7%B1%BB%E6%98%BE%E7%A4%BA%E4%BA%BA%E6%80%A7%E5%8C%96%E6%97%B6%E9%97%B4%E9%9A%94%E6%96%AD/"/>
    <url>/2017/05/09/%E5%9C%A8Laravel%E4%B8%AD%E4%BD%BF%E7%94%A8Carbon%E7%B1%BB%E6%98%BE%E7%A4%BA%E4%BA%BA%E6%80%A7%E5%8C%96%E6%97%B6%E9%97%B4%E9%9A%94%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/riccardo-mion-1072804-unsplash.jpg"></p><h5 id="将显示语言更改为中文"><a href="#将显示语言更改为中文" class="headerlink" title="将显示语言更改为中文"></a>将显示语言更改为中文</h5><span id="more"></span><p>在app&#x2F;Providers&#x2F;AppServiceProvider.php中添加以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">public <span class="hljs-keyword">function</span> <span class="hljs-title function_">boot</span>(<span class="hljs-params"></span>)<br>  &#123;<br>      \<span class="hljs-title class_">Carbon</span>\<span class="hljs-title class_">Carbon</span>::<span class="hljs-title function_">setLocale</span>(<span class="hljs-string">&#x27;zh&#x27;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="在需要使用的Model中添加函数"><a href="#在需要使用的Model中添加函数" class="headerlink" title="在需要使用的Model中添加函数"></a>在需要使用的Model中添加函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">在<span class="hljs-title class_">Model</span>头部use <span class="hljs-title class_">Carbon</span>\<span class="hljs-title class_">Carbon</span>;<br><span class="hljs-title class_">CreatedAt</span>指代的是<span class="hljs-title class_">Model</span>映射表中的created_at字段<br>例如要使用updated_at字段则可以将函数名命名为getUpdatedAtAttributed<br><br>public <span class="hljs-keyword">function</span> <span class="hljs-title function_">getCreatedAtAttribute</span>(<span class="hljs-params">$date</span>)<br>  &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Carbon</span>::<span class="hljs-title function_">now</span>() &lt; <span class="hljs-title class_">Carbon</span>::<span class="hljs-title function_">parse</span>($date)-&gt;<span class="hljs-title function_">addDays</span>(<span class="hljs-number">10</span>))<br>      &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Carbon</span>::<span class="hljs-title function_">parse</span>($date);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Carbon</span>::<span class="hljs-title function_">parse</span>($date)-&gt;<span class="hljs-title function_">diffForHumans</span>();<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="在视图中引用"><a href="#在视图中引用" class="headerlink" title="在视图中引用"></a>在视图中引用</h5><p>$article-&gt;created_at<br><strong>只有Carbon对象才可以进行如上时间格式处理，可以在Model中加入 protected $dates &#x3D; [‘需要处理字段’]</strong></p><blockquote><p>参考laravist <a href="https://www.codecasts.com/blog/post/use-carbon-to-format-datetime-in-laravel-project">JellyBool文章</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laravel中解决跨域问题</title>
    <link href="/2017/05/05/Laravel%E4%B8%AD%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <url>/2017/05/05/Laravel%E4%B8%AD%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/dmitrii-medvedev-232397-unsplash.jpg"></p><h5 id="在laravel中开启跨域是通过中间件实现的"><a href="#在laravel中开启跨域是通过中间件实现的" class="headerlink" title="在laravel中开启跨域是通过中间件实现的"></a>在laravel中开启跨域是通过中间件实现的</h5><span id="more"></span><ol><li><p>创建中间件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php artisan make:middleware Cors<br></code></pre></td></tr></table></figure></li><li><p>在Cors中间件中写入</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;?php namespace <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Http</span>\<span class="hljs-title class_">Middleware</span>;<br><br>use <span class="hljs-title class_">Closure</span>;<br>use <span class="hljs-title class_">Response</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cors</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Handle an incoming request.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span>  \Illuminate\Http\Request  $request</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span>  \Closure  $next</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> <span class="hljs-variable">mixed</span></span><br><span class="hljs-comment">   */</span><br>  public <span class="hljs-keyword">function</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">$request, Closure $next</span>)<br>  &#123;<br><br>    $response = $next($request);<br>    $response-&gt;<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;需要跨域请求的网址&#x27;</span>);<br>    $response-&gt;<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Origin, Content-Type, Cookie, Accept&#x27;</span>);<br>    $response-&gt;<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;GET, POST, PATCH, PUT, OPTIONS,X-CSRF-TOKEN&#x27;</span>);<br>    $response-&gt;<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>);<br>    <span class="hljs-keyword">return</span> $response;<br>  &#125;<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>注册中间件<br>  在 app&#x2F;Http&#x2F;Kernel.php文件的$routeMiddleware中加入</li></ol>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;cors&#x27;</span> =&gt; <span class="hljs-title class_">\App\Http\Middleware\Cors</span>::<span class="hljs-variable language_">class</span>,<br></code></pre></td></tr></table></figure><p>  然后就可以在需要请求的路由中加入cors中间件了，至此加入该中间件的路由就可以进行跨域请求</p><h5 id="需要注意以下几点"><a href="#需要注意以下几点" class="headerlink" title="需要注意以下几点"></a>需要注意以下几点</h5><ul><li>对于跨域访问并需要伴随认证信息的请求，需要在 XMLHttpRequest 实例中指定 withCredentials 为 true。</li><li>这个中间件你可以根据自己的需求进行构建，如果需要在请求中伴随认证信息（包含 cookie，session）那么你就需要指定 Access-Control-Allow-Credentials 为 true, 因为对- 请求来说如果你未指定该响应头，那么浏览器会直接忽略该响应。</li><li>在响应中指定 Access-Control-Allow-Credentials 为 true 时，Access-Control-Allow-Origin 不能指定为 *</li><li>后置中间件只有在正常响应时才会被追加响应头，而如果出现异常，这时响应是不会经过中间件的。</li><li>注意laravel中如果不是get请求注意csrf验证</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序中的微信支付-申请退款</title>
    <link href="/2017/05/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E7%94%B3%E8%AF%B7%E9%80%80%E6%AC%BE/"/>
    <url>/2017/05/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-%E7%94%B3%E8%AF%B7%E9%80%80%E6%AC%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/xavi-cabrera-1506394-unsplash.jpg"></p><span id="more"></span><blockquote><p>微信支付的退款需要双向证书验证！证书使用可参考微信支付<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1">官方文档</a></p></blockquote><ul><li><p>证书不应该放在项目目录，应该放在有访问权限控制的目录**</p></li><li><p>交易时间超过一年无法完成退款操作</p></li><li><p>退款订单依赖于订单支付时形成的订单号，可以是自定义的订单号，也可以是微信生成的订单号</p></li><li><p>可以单笔交易分多次退款，但是退款总额不能超过订单总额</p></li></ul><h6 id="需要的参数"><a href="#需要的参数" class="headerlink" title="需要的参数"></a>需要的参数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">$appid = <span class="hljs-string">&#x27;xxxxxxxxxxxxx&#x27;</span>;<br>$mch_id = <span class="hljs-string">&#x27;xxxxxxxxxxxx&#x27;</span>;  <span class="hljs-comment">//商户名</span><br>$nonce_str = <span class="hljs-title function_">nonceStr</span>();  <span class="hljs-comment">//随机字符串</span><br>$out_trade_no = $order_info-&gt;order_sn;   <span class="hljs-comment">//订单号</span><br>$out_refund_no = $order_info-&gt;order_sn;   <span class="hljs-comment">//退货号</span><br>**$refund_fee = <span class="hljs-title function_">number_format</span>($order_info-&gt;goods_amount*<span class="hljs-number">100</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">//退款总额  金额单位为分，不能有小数**</span><br>**$total_fee = <span class="hljs-title function_">number_format</span>($order_info-&gt;goods_amount*<span class="hljs-number">100</span>,<span class="hljs-number">0</span>);  <span class="hljs-comment">//商品总额  金额单位为分，不能有小数**</span><br>$op_user_id = <span class="hljs-string">&#x27;xxxxxxx&#x27;</span>;  <span class="hljs-comment">//操作员id  可以直接填写商户号</span><br>$key = <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>;   <span class="hljs-comment">//商户支付平台的key</span><br></code></pre></td></tr></table></figure><h6 id="随机字符串生成函数"><a href="#随机字符串生成函数" class="headerlink" title="随机字符串生成函数"></a>随机字符串生成函数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 签名设置中随机字符串</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> <span class="hljs-variable">string</span></span><br><span class="hljs-comment">     */</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">nonceStr</span>(<span class="hljs-params"></span>)&#123;<br>        $chars = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;<br>        $str =<span class="hljs-string">&quot;&quot;</span>;<br>        $length = <span class="hljs-number">32</span>;<br>        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $length; $i++)&#123;<br>            $str .= <span class="hljs-title function_">substr</span>($chars, <span class="hljs-title function_">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_">strlen</span>($chars)-<span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 随机字符串</span><br>        <span class="hljs-keyword">return</span> $str;<br>    &#125;<br></code></pre></td></tr></table></figure><h6 id="将以上全部参数进行签名签名算法"><a href="#将以上全部参数进行签名签名算法" class="headerlink" title="将以上全部参数进行签名签名算法"></a>将以上全部参数进行签名<a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1">签名算法</a></h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">$att = [];<br>$att[<span class="hljs-string">&#x27;appid&#x27;</span>] = $appid;<br>$att[<span class="hljs-string">&#x27;mch_id&#x27;</span>] = $mch_id;<br>$att[<span class="hljs-string">&#x27;nonce_str&#x27;</span>] = $nonce_str;<br>$att[<span class="hljs-string">&#x27;out_trade_no&#x27;</span>] = $out_trade_no;<br>$att[<span class="hljs-string">&#x27;out_refund_no&#x27;</span>] = $out_refund_no;<br>$att[<span class="hljs-string">&#x27;refund_fee&#x27;</span>] = $refund_fee;<br>$att[<span class="hljs-string">&#x27;total_fee&#x27;</span>] = $total_fee;<br>$att[<span class="hljs-string">&#x27;op_user_id&#x27;</span>] = $op_user_id;<br>$sign = <span class="hljs-title class_">Wx</span>::<span class="hljs-title class_">MakeSign</span>($att,$key);  <span class="hljs-comment">//生成签名</span><br></code></pre></td></tr></table></figure><h6 id="生成签名函数"><a href="#生成签名函数" class="headerlink" title="生成签名函数"></a>生成签名函数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">$att</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">$key</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> <span class="hljs-variable">string</span></span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MakeSign</span>(<span class="hljs-params">$att, $key</span>)<br>&#123;<br>    <span class="hljs-comment">//签名步骤一：按字典序排序参数</span><br>    <span class="hljs-title function_">ksort</span>($att);<br>    $string = <span class="hljs-title class_">ToUrlParams</span>($att);<br>    <span class="hljs-comment">//签名步骤二：在string后加入KEY</span><br>    $string = $string . <span class="hljs-string">&quot;&amp;key=&quot;</span>.<span class="hljs-property">$key</span>;<br>    <span class="hljs-comment">//签名步骤三：MD5加密</span><br>    $string = <span class="hljs-title function_">md5</span>($string);<br>    <span class="hljs-comment">//签名步骤四：所有字符转为大写</span><br>    $result = <span class="hljs-title function_">strtoupper</span>($string);<br>    <span class="hljs-keyword">return</span> $result;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="将签名后的sign和以上除key以外的所有参数转成xml格式，得到最终的发送数据"><a href="#将签名后的sign和以上除key以外的所有参数转成xml格式，得到最终的发送数据" class="headerlink" title="将签名后的sign和以上除key以外的所有参数转成xml格式，得到最终的发送数据"></a>将签名后的sign和以上除key以外的所有参数转成xml格式，得到最终的发送数据</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$att[<span class="hljs-string">&#x27;sign&#x27;</span>] = $sign;<br>$xml_data = <span class="hljs-title class_">ToXml</span>($att);<br></code></pre></td></tr></table></figure><h6 id="array转xml格式函数"><a href="#array转xml格式函数" class="headerlink" title="array转xml格式函数"></a>array转xml格式函数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出xml字符</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> <span class="hljs-variable">WxPayException</span></span><br><span class="hljs-comment"> **/</span><br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ToXml</span>(<span class="hljs-params">$result</span>)<br>&#123;<br>    $xml = <span class="hljs-string">&quot;&lt;xml&gt;&quot;</span>;<br>    foreach ($result <span class="hljs-keyword">as</span> $key=&gt;$val)<br>    &#123;<br>        $xml.=<span class="hljs-string">&quot;&lt;&quot;</span>.<span class="hljs-property">$key</span>.<span class="hljs-string">&quot;&gt;&lt;![CDATA[&quot;</span>.<span class="hljs-property">$val</span>.<span class="hljs-string">&quot;]]&gt;&lt;/&quot;</span>.<span class="hljs-property">$key</span>.<span class="hljs-string">&quot;&gt;&quot;</span>;<br>    &#125;<br>    $xml.=<span class="hljs-string">&quot;&lt;/xml&gt;&quot;</span>;<br>    <span class="hljs-keyword">return</span> $xml;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="发送退款请求"><a href="#发送退款请求" class="headerlink" title="发送退款请求"></a>发送退款请求</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$url = <span class="hljs-string">&#x27;https://api.mch.weixin.qq.com/secapi/pay/refund&#x27;</span>; <span class="hljs-comment">// 退款微信接口准备</span><br>$result = $this-&gt;<span class="hljs-title function_">postXmlCurl</span>($xml_data,$url);<br><span class="hljs-keyword">return</span> $result;<br></code></pre></td></tr></table></figure><h6 id="退款证书验证及退款请求"><a href="#退款证书验证及退款请求" class="headerlink" title="退款证书验证及退款请求"></a>退款证书验证及退款请求</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> <span class="hljs-variable">$xml_data</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> <span class="hljs-variable">mixed</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> \App\Models\WxPayException</span><br><span class="hljs-comment">   */</span><br>  public <span class="hljs-keyword">function</span> <span class="hljs-title function_">postXmlCurl</span>(<span class="hljs-params">$xml_data,$url</span>)<br>  &#123;<br>      $useCert = <span class="hljs-literal">true</span>;<br>      $second = <span class="hljs-number">6</span>;<br>      $ch = <span class="hljs-title function_">curl_init</span>();<br>      <span class="hljs-comment">// 设置超时</span><br>      <span class="hljs-title function_">curl_setopt</span>($ch, <span class="hljs-variable constant_">CURLOPT_TIMEOUT</span>, $second);<br>      <span class="hljs-title function_">curl_setopt</span>($ch,<span class="hljs-variable constant_">CURLOPT_URL</span>, $url);<br>      <span class="hljs-title function_">curl_setopt</span>($ch,<span class="hljs-variable constant_">CURLOPT_SSL_VERIFYPEER</span>,<span class="hljs-variable constant_">TRUE</span>);<br>      <span class="hljs-title function_">curl_setopt</span>($ch,<span class="hljs-variable constant_">CURLOPT_SSL_VERIFYHOST</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//严格校验</span><br>      <span class="hljs-comment">// 设置header</span><br>      <span class="hljs-title function_">curl_setopt</span>($ch, <span class="hljs-variable constant_">CURLOPT_HEADER</span>, <span class="hljs-variable constant_">FALSE</span>);<br>      <span class="hljs-comment">// 要求结果为字符串且输出到屏幕上</span><br>      <span class="hljs-title function_">curl_setopt</span>($ch, <span class="hljs-variable constant_">CURLOPT_RETURNTRANSFER</span>, <span class="hljs-variable constant_">TRUE</span>);<br>      <span class="hljs-comment">// 退款严格使用证书，必须是公众号所对应的商户平台下的证书才可以，安全不的外泄</span><br>      <span class="hljs-keyword">if</span>($useCert == <span class="hljs-literal">true</span>)&#123;<br>          <span class="hljs-comment">// 设置证书</span><br>          <span class="hljs-comment">// 使用证书：cert 与 key 分别属于两个.pem文件   </span><br>          <span class="hljs-title function_">curl_setopt</span>($ch,<span class="hljs-variable constant_">CURLOPT_SSLCERTTYPE</span>,<span class="hljs-string">&#x27;PEM&#x27;</span>);<br>          $path_cert = <span class="hljs-title function_">dirname</span>(__FILE__) . <span class="hljs-string">&#x27;/cert/apiclient_cert.pem&#x27;</span>;    <span class="hljs-comment">//证书路径必须是lunix下的物理路径（绝对路径）    </span><br>          <span class="hljs-title function_">curl_setopt</span>($ch,<span class="hljs-variable constant_">CURLOPT_SSLCERT</span>,$path_cert);<br>          <span class="hljs-title function_">curl_setopt</span>($ch,<span class="hljs-variable constant_">CURLOPT_SSLKEYTYPE</span>,<span class="hljs-string">&#x27;PEM&#x27;</span>);<br>          $path_key = <span class="hljs-title function_">dirname</span>(__FILE__) . <span class="hljs-string">&#x27;/cert/apiclient_key.pem&#x27;</span>;      <span class="hljs-comment">//证书路径必须是lunix下的物理路径（绝对路径）</span><br>          <span class="hljs-title function_">curl_setopt</span>($ch,<span class="hljs-variable constant_">CURLOPT_SSLKEY</span>,$path_key);<br>      &#125;<br>      <span class="hljs-comment">// post提交方式</span><br>      <span class="hljs-title function_">curl_setopt</span>($ch, <span class="hljs-variable constant_">CURLOPT_POST</span>, <span class="hljs-variable constant_">TRUE</span>);<br>      <span class="hljs-title function_">curl_setopt</span>($ch, <span class="hljs-variable constant_">CURLOPT_POSTFIELDS</span>, $xml_data);<br>      <span class="hljs-comment">// 运行curl</span><br>      $xml = <span class="hljs-title function_">curl_exec</span>($ch);<br><span class="hljs-comment">//         返回结果0的时候能只能表明程序是正常返回不一定说明退款成功而已</span><br>      <span class="hljs-keyword">if</span>($xml)&#123;<br>          <span class="hljs-title function_">curl_close</span>($ch);<br>          <span class="hljs-comment">// 把xml转化成数组</span><br>          <span class="hljs-title function_">libxml_disable_entity_loader</span>(<span class="hljs-literal">true</span>);<br>          $array_data = <span class="hljs-title class_">FromXml</span>($xml);<br>          $order_sn = $array_data[<span class="hljs-string">&#x27;out_trade_no&#x27;</span>];   <span class="hljs-comment">//根据返回数据中的订单号查询订单更改订单状态</span><br>          $res_shipping = <span class="hljs-attr">DB</span>::<span class="hljs-title function_">table</span>(<span class="hljs-string">&#x27;ecs_order_info&#x27;</span>)-&gt;<span class="hljs-title function_">where</span>(<span class="hljs-string">&#x27;order_sn&#x27;</span>,$order_sn)-&gt;<span class="hljs-title function_">update</span>([<span class="hljs-string">&#x27;shipping_status&#x27;</span> =&gt; <span class="hljs-number">6</span>]);   <span class="hljs-comment">//更改状态  退货已完成</span><br>          $res_return = <span class="hljs-attr">DB</span>::<span class="hljs-title function_">table</span>(<span class="hljs-string">&#x27;return_goods&#x27;</span>)-&gt;<span class="hljs-title function_">where</span>(<span class="hljs-string">&#x27;order_sn&#x27;</span>,$order_sn)-&gt;<span class="hljs-title function_">update</span>([<span class="hljs-string">&#x27;return_status&#x27;</span> =&gt; <span class="hljs-number">1</span>]);   <span class="hljs-comment">//更改退货表</span><br>          <span class="hljs-keyword">if</span>($res_shipping &amp;&amp; $res_return)&#123;<br>              $result[<span class="hljs-string">&#x27;sucNum&#x27;</span>] = <span class="hljs-number">1</span>;    <span class="hljs-comment">//更改状态成功</span><br>              <span class="hljs-keyword">return</span> $result;<br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>              $result[<span class="hljs-string">&#x27;sucNum&#x27;</span>] = <span class="hljs-number">2</span>;    <span class="hljs-comment">//更改状态失败</span><br>              <span class="hljs-keyword">return</span> $result;<br>          &#125;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          $error = <span class="hljs-title function_">curl_errno</span>($ch);<br>          <span class="hljs-title function_">curl_close</span>($ch);<br>          <span class="hljs-comment">// 错误的时候返回错误码。</span><br>          $result[<span class="hljs-string">&#x27;errNum&#x27;</span>] = $error;<br>          <span class="hljs-keyword">return</span> $result;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h6 id="xml转array函数"><a href="#xml转array函数" class="headerlink" title="xml转array函数"></a>xml转array函数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将xml转为array</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $xml</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> <span class="hljs-variable">WxPayException</span></span><br><span class="hljs-comment"> */</span><br>public <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">FromXml</span>(<span class="hljs-params">$xml</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span>(!$xml)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WxPayException</span>(<span class="hljs-string">&quot;xml数据异常！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//将XML转为array</span><br>    <span class="hljs-comment">//禁止引用外部xml实体</span><br>    <span class="hljs-title function_">libxml_disable_entity_loader</span>(<span class="hljs-literal">true</span>);<br>    $values = <span class="hljs-title function_">json_decode</span>(<span class="hljs-title function_">json_encode</span>(<span class="hljs-title function_">simplexml_load_string</span>($xml, <span class="hljs-string">&#x27;SimpleXMLElement&#x27;</span>, <span class="hljs-variable constant_">LIBXML_NOCDATA</span>)), <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> $values;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wechat Pay</tag>
      
      <tag>Wechat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Laravel自带的Auth完成用户验证以及通过SendCloud完成邮箱验证</title>
    <link href="/2017/04/27/%E5%88%A9%E7%94%A8Laravel%E8%87%AA%E5%B8%A6%E7%9A%84Auth%E5%AE%8C%E6%88%90%E7%94%A8%E6%88%B7%E9%AA%8C%E8%AF%81%E4%BB%A5%E5%8F%8A%E9%80%9A%E8%BF%87SendCloud%E5%AE%8C%E6%88%90%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81/"/>
    <url>/2017/04/27/%E5%88%A9%E7%94%A8Laravel%E8%87%AA%E5%B8%A6%E7%9A%84Auth%E5%AE%8C%E6%88%90%E7%94%A8%E6%88%B7%E9%AA%8C%E8%AF%81%E4%BB%A5%E5%8F%8A%E9%80%9A%E8%BF%87SendCloud%E5%AE%8C%E6%88%90%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/picography-girl-pink-sneakers-longboard-road-1.jpg"></p><h5 id="执行代码生成用户认证需要的路由，控制器，视图等文件"><a href="#执行代码生成用户认证需要的路由，控制器，视图等文件" class="headerlink" title="执行代码生成用户认证需要的路由，控制器，视图等文件"></a>执行代码生成用户认证需要的路由，控制器，视图等文件</h5><span id="more"></span><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">php artisan <span class="hljs-built_in">make</span>:auth<br></code></pre></td></tr></table></figure><p>运行完成之后再页面访问就可以看到基本的用户认证流程，可以根据自己的需求更改视图模板</p><h5 id="再migrations中更改users用户表的字段，添加自己想要的字段！！！"><a href="#再migrations中更改users用户表的字段，添加自己想要的字段！！！" class="headerlink" title="再migrations中更改users用户表的字段，添加自己想要的字段！！！"></a>再migrations中更改users用户表的字段，添加自己想要的字段！！！</h5><p>再user表中添加一个is_active用于验证邮箱是否激活<br>添加一个email_token作为邮箱验证的token验证字段</p><h5 id="配置广域网数据库之后执行一下代码生成表"><a href="#配置广域网数据库之后执行一下代码生成表" class="headerlink" title="配置广域网数据库之后执行一下代码生成表"></a>配置广域网数据库之后执行一下代码生成表</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">php artisan migrate</span><br></code></pre></td></tr></table></figure><h5 id="安装Laravel-SendCloud扩展，完成相关配置"><a href="#安装Laravel-SendCloud扩展，完成相关配置" class="headerlink" title="安装Laravel-SendCloud扩展，完成相关配置"></a>安装Laravel-SendCloud扩展，完成相关配置</h5><p>在项目目录下执行 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer require naux/sendcloud<br></code></pre></td></tr></table></figure><p>修改 config&#x2F;app.php，添加服务提供者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">‘providers’ =&gt; [<br><span class="hljs-comment">// 添加这行</span><br><span class="hljs-title class_">Naux</span>\<span class="hljs-title class_">Mail</span>\<span class="hljs-title class_">SendCloudServiceProvider</span>::<span class="hljs-keyword">class</span>,<br>];<br></code></pre></td></tr></table></figure><h5 id="创建自己的SendCloud账号，完成以下配置"><a href="#创建自己的SendCloud账号，完成以下配置" class="headerlink" title="创建自己的SendCloud账号，完成以下配置"></a>创建自己的SendCloud账号，完成以下配置</h5><p>在 .env 中配置你的密钥， 并修改邮件驱动为 sendcloud</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">MAIL_DRIVER</span>=sendcloud<br><span class="hljs-variable constant_">SEND_CLOUD_USER</span>=   # 创建的 api_user<br><span class="hljs-variable constant_">SEND_CLOUD_KEY</span>=    # 分配的 api_key<br></code></pre></td></tr></table></figure><blockquote><p>看再github查看祥细配置<a href="https://github.com/NauxLiu/Laravel-SendCloud#laravel-sendcloud">Laravel-SendCloud</a></p></blockquote><h5 id="再SendCloud中定义邮件模板"><a href="#再SendCloud中定义邮件模板" class="headerlink" title="再SendCloud中定义邮件模板"></a>再SendCloud中定义邮件模板</h5><p>模板中可以定义两个变量，再发送邮件给注册者的时候传递name和url两个参数，name用于标识验证用户，url用于点击完成<br>验证的的路由！再邮件模板中定义变量是有%变量名%</p><blockquote><p>祥细使用参考<a href="http://sendcloud.sohu.com/doc/guide/base/">SendCloud文档</a></p></blockquote><h5 id="再用户注册完成之后发送邮件"><a href="#再用户注册完成之后发送邮件" class="headerlink" title="再用户注册完成之后发送邮件"></a>再用户注册完成之后发送邮件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">protected <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">array $data</span>)<br>    &#123;<br>        $user = <span class="hljs-title class_">User</span>::<span class="hljs-title function_">create</span>([<br>            <span class="hljs-string">&#x27;name&#x27;</span> =&gt; $data[<span class="hljs-string">&#x27;name&#x27;</span>],<br>            <span class="hljs-string">&#x27;email&#x27;</span> =&gt; $data[<span class="hljs-string">&#x27;email&#x27;</span>],<br>            <span class="hljs-string">&#x27;email_token&#x27;</span> =&gt; <span class="hljs-title function_">str_random</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-title function_">bcrypt</span>($data[<span class="hljs-string">&#x27;password&#x27;</span>]),<br>        ]);<br>        $this-&gt;<span class="hljs-title function_">sendVerifyEmailTo</span>($user);<br>        <span class="hljs-keyword">return</span> $user;<br>    &#125;<br>    private <span class="hljs-keyword">function</span> <span class="hljs-title function_">sendVerifyEmailTo</span>(<span class="hljs-params">$user</span>)<br>    &#123;<br>        $data = [<br>            <span class="hljs-string">&#x27;url&#x27;</span> =&gt; <span class="hljs-title function_">route</span>(<span class="hljs-string">&#x27;email.verify&#x27;</span>,[<span class="hljs-string">&#x27;token&#x27;</span>=&gt;$user-&gt;email_token]),  <span class="hljs-comment">//再邮箱中点击跳转链接携带email_token值</span><br>            <span class="hljs-string">&#x27;name&#x27;</span> =&gt; $user-&gt;name<br>            ];<br>        $template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendCloudTemplate</span>(<span class="hljs-string">&#x27;blog_register&#x27;</span>, $data);<br>        <span class="hljs-title class_">Mail</span>::<span class="hljs-title function_">raw</span>($template, <span class="hljs-keyword">function</span> (<span class="hljs-params">$message</span>) use ($user) &#123;<br>            $message-&gt;<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;xxx@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Andrew&#x27;</span>);<br>            $message-&gt;<span class="hljs-title function_">to</span>($user-&gt;email);  <span class="hljs-comment">//用户邮箱</span><br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="用户在邮箱中点击链接执行的操作"><a href="#用户在邮箱中点击链接执行的操作" class="headerlink" title="用户在邮箱中点击链接执行的操作"></a>用户在邮箱中点击链接执行的操作</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">public <span class="hljs-keyword">function</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">$token</span>)<br>    &#123;<br>        $user = <span class="hljs-title class_">User</span>::<span class="hljs-title function_">where</span>(<span class="hljs-string">&#x27;email_token&#x27;</span>,$token)-&gt;<span class="hljs-title function_">first</span>();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_">is_null</span>($user))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>        &#125;<br>        $user-&gt;is_active = <span class="hljs-number">1</span>;<br>        $user-&gt;email_token = <span class="hljs-title function_">str_random</span>(<span class="hljs-number">40</span>);  <span class="hljs-comment">//改变token值</span><br>        $user-&gt;<span class="hljs-title function_">save</span>();<br>        <span class="hljs-title class_">Auth</span>::<span class="hljs-title function_">login</span>($user);  <span class="hljs-comment">//执行登陆</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;/home&#x27;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Laravel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序中的图片预加载</title>
    <link href="/2017/04/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    <url>/2017/04/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/whitney-wright.jpg"></p><h4 id="通过view-scroll只渲染当屏图片，屏外图片显示默认背景"><a href="#通过view-scroll只渲染当屏图片，屏外图片显示默认背景" class="headerlink" title="通过view-scroll只渲染当屏图片，屏外图片显示默认背景"></a>通过view-scroll只渲染当屏图片，屏外图片显示默认背景</h4><span id="more"></span><ol><li>在微信小程序中通过 scroll-view swiper组件滚动懒加载图片未加载图片可以先给一个默认背景</li><li>通过函数计算得到屏幕高度，滚屏高度，元素等高度，设置加载个数<blockquote><p>参考segmentfault 作者不二的文章</p></blockquote></li></ol><h6 id="wxml文件"><a href="#wxml文件" class="headerlink" title="wxml文件"></a>wxml文件</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">showIndex为当屏中首列表元素的索引值<br>scrollLoad滚动加载<br>scrollHide图片当屏渲染<br>&lt;scroll-view <span class="hljs-attr">wx</span>:<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;&#123;&#123;isNet&#125;&#125;&quot;</span> scroll-y=<span class="hljs-string">&quot;true&quot;</span>bindscrolltolower=<span class="hljs-string">&quot;scrollLoad&quot;</span> bindscroll=<span class="hljs-string">&quot;scrollHide&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;total&#125;&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;imgDatas&#125;&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;showIndex + 24 &gt; index &amp;&amp; showIndex - 6 &lt; index&#125;&#125;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;item.pic.url&#125;&#125;&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;aspectFill&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br>&lt;/scroll-view&gt;<br></code></pre></td></tr></table></figure><h5 id="计算当前屏的函数"><a href="#计算当前屏的函数" class="headerlink" title="计算当前屏的函数"></a>计算当前屏的函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">offetHeight  滚动计算部分到顶部距离<br>scrollTop   滚动高度<br>height      每个模块的高度<br>colunm      列数<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">countIndex</span>(<span class="hljs-params">offetHight, scrollTop, height, colunm</span>)&#123;  <span class="hljs-comment">// 单例获取屏幕宽度比</span><br><span class="hljs-keyword">if</span> (!countIndex.<span class="hljs-property">pix</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">let</span> res = wx.<span class="hljs-title function_">getSystemInfoSync</span>()<br>countIndex.<span class="hljs-property">pix</span> = res.<span class="hljs-property">windowWidth</span> / <span class="hljs-number">375</span><br>&#125; <span class="hljs-keyword">catch</span> (e)  &#123;<br>countIndex.<span class="hljs-property">pix</span> = <span class="hljs-number">1</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> scroll = scrollTop - offetHight * countIndex.<span class="hljs-property">pix</span><br><span class="hljs-keyword">let</span> hei = height * countIndex.<span class="hljs-property">pix</span><br><span class="hljs-keyword">return</span> scroll &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(scroll / hei) * colunm : <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Page</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">scrollData</span>: &#123;<br>      <span class="hljs-attr">offetHeight</span>: <span class="hljs-number">15</span>, <span class="hljs-comment">// px</span><br>      <span class="hljs-attr">height</span>: <span class="hljs-number">80</span>, <span class="hljs-comment">// px</span><br>      <span class="hljs-attr">colunm</span>: <span class="hljs-number">3</span><br>      &#125;,<br>      <span class="hljs-attr">showIndex</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    scrollHide (e) &#123;<br>    <span class="hljs-keyword">let</span> data = [<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">scrollData</span>.<span class="hljs-property">offetHeight</span>,<br>    e.<span class="hljs-property">detail</span>.<span class="hljs-property">scrollTop</span>,<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">scrollData</span>.<span class="hljs-property">height</span>,<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">scrollData</span>.<span class="hljs-property">colunm</span><br>    ]<br>    <span class="hljs-keyword">let</span> index = wxTools.<span class="hljs-title function_">countIndex</span>(...data)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">showIndex</span>: index<br>      &#125;)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="先加载同等比例的缩略图，然后等原图加载完成后覆盖缩略图-有现成的图片预加载组件可用"><a href="#先加载同等比例的缩略图，然后等原图加载完成后覆盖缩略图-有现成的图片预加载组件可用" class="headerlink" title="先加载同等比例的缩略图，然后等原图加载完成后覆盖缩略图(有现成的图片预加载组件可用)"></a>先加载同等比例的缩略图，然后等原图加载完成后覆盖缩略图(有现成的图片预加载组件可用)</h4><blockquote><p>也可以直接使用适用于微信小程序的图片预加载组件 直接参考<a href="https://github.com/o2team/wxapp-img-loader">GitHub项目</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wechat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PhpStorm常用快捷键</title>
    <link href="/2017/03/21/PhpStorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2017/03/21/PhpStorm%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/ethan.jpg"></p><ul><li>ctrl + o 在一个类中寻找相应的方法</li><li>ctrl + space 打开语法提示<span id="more"></span></li><li>ctrl + r 替换</li><li>shift + shift 文件名 &#x2F; Class &#x2F; 功能… 都可以搜索</li><li>Ctrl + e 打开最近的文件</li><li>Alt + 1 打开关闭边栏</li><li>Ctrl + Shift + A 调出plugins窗口</li><li>Ctrl + Alt + Shift + T 调出Refactor This（重构面板）用于重构方法</li><li>ctrl + f 查找</li><li>ctrl + ‘-‘ 收缩代码</li><li>ctrl + ‘+’ 展开代码</li><li>ctrl + x 剪切整行</li><li>ctrl + d 复制上一行</li><li>ctrl + Esc 当前激活的任意小窗口最小化</li><li>ctrl + b 跳转到变量函数声明处</li><li>ctrl + 鼠标 代码追踪</li><li>ctrl + Alt + l 格式化代码</li><li>ctrl + shift + r 快速查找关键字在整个项目中的位置，并替换</li><li>ctrl + shift + f 快速查找关键字在整个项目中的位置</li><li>ctrl + shift + u 选中部分字母分大小写的转换</li><li>ctrl + shift +Alt + n 函数名查找</li><li>ctrl + shift + i 查看变量初始化值，在css文件中显示class属性，在js文件中显示function详细信息</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHPStorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用flex高效布局</title>
    <link href="/2017/03/15/%E7%94%A8flex%E9%AB%98%E6%95%88%E5%B8%83%E5%B1%80/"/>
    <url>/2017/03/15/%E7%94%A8flex%E9%AB%98%E6%95%88%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/james-fitzgerald-02.jpg"></p><ul><li>设为Flex布局以后，子元素的float、clear和vertical-align属性将失效</li><li>个别没有用到，不太清楚具体使用</li></ul><span id="more"></span><h5 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h5><h6 id="flex-direction-决定项目主轴方向排列"><a href="#flex-direction-决定项目主轴方向排列" class="headerlink" title="flex-direction: 决定项目主轴方向排列"></a>flex-direction: 决定项目主轴方向排列</h6><ul><li>row —&gt; 默认 从左至右</li><li>row-reverse &lt;— 从右至左</li><li>column 垂直方向 从上到下</li><li>column-reverse 垂直方向 从下到上</li></ul><h6 id="flex-wamp-定义主轴上是否换行-在定义了宽度之后换行才会起作用"><a href="#flex-wamp-定义主轴上是否换行-在定义了宽度之后换行才会起作用" class="headerlink" title="flex-wamp: 定义主轴上是否换行 在定义了宽度之后换行才会起作用"></a>flex-wamp: 定义主轴上是否换行 在定义了宽度之后换行才会起作用</h6><ul><li>nowrap 默认 不换行</li><li>wrap 换行 第一行在上方</li><li>wrap-reverse 换行 第一行在下方</li></ul><h6 id="flex-flow-是flex-direction-和-flex-wrap-属性的简写"><a href="#flex-flow-是flex-direction-和-flex-wrap-属性的简写" class="headerlink" title="flex-flow: 是flex-direction 和 flex-wrap 属性的简写"></a>flex-flow: 是flex-direction 和 flex-wrap 属性的简写</h6><ul><li>row nowrap 默认</li></ul><h6 id="justify-content-定义项目在主轴上的对齐方式"><a href="#justify-content-定义项目在主轴上的对齐方式" class="headerlink" title="justify-content: 定义项目在主轴上的对齐方式"></a>justify-content: 定义项目在主轴上的对齐方式</h6><ul><li>flex-start 默认 左对齐</li><li>flex-end 右对齐</li><li>center 居中</li><li>space-between 两端对齐 项目间间隔相等</li><li>space-around 每个项目两侧间隔相等，项目之间间隔为2倍</li></ul><h6 id="align-items-定义了项目在交叉轴上如何对齐"><a href="#align-items-定义了项目在交叉轴上如何对齐" class="headerlink" title="align-items: 定义了项目在交叉轴上如何对齐"></a>align-items: 定义了项目在交叉轴上如何对齐</h6><ul><li>flex-start 交叉轴起点对齐</li><li>flex-end 交叉轴重点对齐</li><li>center 交叉轴中点对齐</li><li>baseline 第一行文字基线对齐</li><li>stretch 默认 若未设置高度或为auto，将占满整个高度</li></ul><h6 id="align-content-定义了多根轴线的对齐方式-若项目只有一根轴线，则不起作用"><a href="#align-content-定义了多根轴线的对齐方式-若项目只有一根轴线，则不起作用" class="headerlink" title="align-content: 定义了多根轴线的对齐方式 若项目只有一根轴线，则不起作用"></a>align-content: 定义了多根轴线的对齐方式 若项目只有一根轴线，则不起作用</h6><ul><li>flex-start 与交叉轴起点对齐</li><li>flex-end 交叉轴终点对齐</li><li>center 居中对齐</li><li>space-between 两端轴线间间隔平分</li><li>space-around 每根轴线间间隔相等</li><li>stretch 默认 轴线占满整个交叉轴</li></ul><h5 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h5><ol><li>order: 定义项目排列次序，越小越靠前 默认0 如：-1 0 5 9</li><li>flex-grow: 定义项目方法比例 默认0</li><li>flex-shrink: 定义项目缩小比例 默认1 负值无效</li><li>flex-basis: 定义在分配多余空间之前，项目占据的主轴空间 默认auto</li><li>flex: flex-grow flex-shrink flex-basis的简写 默认0 1 auto</li></ol><ul><li>auto</li><li>flex-start</li><li>flex-end</li><li>center</li><li>baseline</li><li>streth</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在微信小程序中接入微信支付</title>
    <link href="/2017/03/14/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    <url>/2017/03/14/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%8E%A5%E5%85%A5%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
    
    <content type="html"><![CDATA[<p><img src="https://drewlife.oss-cn-shanghai.aliyuncs.com/toomas-tartes-1503321-unsplash.jpg"></p><span id="more"></span><h5 id="最近在开发一款微信小程序应用，由于是类似于商城的项目，所以需要接入微信支付，在接入微信支付的时候遇到比较多的问题，微信的官方文档对于我这样的新手还是有点不太容易，过程记录如下，大部分工作都在前端完成"><a href="#最近在开发一款微信小程序应用，由于是类似于商城的项目，所以需要接入微信支付，在接入微信支付的时候遇到比较多的问题，微信的官方文档对于我这样的新手还是有点不太容易，过程记录如下，大部分工作都在前端完成" class="headerlink" title="最近在开发一款微信小程序应用，由于是类似于商城的项目，所以需要接入微信支付，在接入微信支付的时候遇到比较多的问题，微信的官方文档对于我这样的新手还是有点不太容易，过程记录如下，大部分工作都在前端完成"></a>最近在开发一款微信小程序应用，由于是类似于商城的项目，所以需要接入微信支付，在接入微信支付的时候遇到比较多的问题，微信的官方文档对于我这样的新手还是有点不太容易，过程记录如下，大部分工作都在前端完成</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">toPay</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>)<br>&#123;<br><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span><br><span class="hljs-keyword">var</span> appid = <span class="hljs-string">&#x27;******************&#x27;</span>  <span class="hljs-comment">//微信小程序APPID</span><br><span class="hljs-keyword">var</span> body = <span class="hljs-string">&#x27;xx商城&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">order_sn</span><br><span class="hljs-keyword">var</span> mch_id = <span class="hljs-string">&#x27;**********&#x27;</span>   <span class="hljs-comment">//商户名</span><br><span class="hljs-keyword">var</span> nonce_str = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> notify_url = <span class="hljs-string">&#x27;https://m.goupiaoliang.com/wechat/ad/return_url&#x27;</span>  <span class="hljs-comment">//回调地址 可访问地址</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> openid = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">openid</span><br><span class="hljs-keyword">var</span> out_trade_no = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">order_sn</span> <span class="hljs-comment">//商户订单号  随机生成的商品订单号</span><br><span class="hljs-keyword">var</span> spbill_create_ip = <span class="hljs-string">&#x27;120.27.154.61&#x27;</span><br><span class="hljs-keyword">var</span> total_fee = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">goods_amount</span> * <span class="hljs-number">100</span>  <span class="hljs-comment">//订单总额 单位为分</span><br><span class="hljs-keyword">var</span> trade_type = <span class="hljs-string">&#x27;JSAPI&#x27;</span>   <span class="hljs-comment">//必须为这个</span><br><span class="hljs-keyword">var</span> key = <span class="hljs-string">&#x27;*************************&#x27;</span>  <span class="hljs-comment">//商户支付平台的key</span><br><span class="hljs-keyword">var</span> requestUrl = app.<span class="hljs-property">globalData</span>.<span class="hljs-property">request</span><br>wx.<span class="hljs-title function_">request</span>(&#123;<br>  <span class="hljs-attr">url</span>: requestUrl + <span class="hljs-string">&#x27;/wechat/junpin/pay&#x27;</span>,  <span class="hljs-comment">//支付订单</span><br>  <span class="hljs-attr">header</span>: &#123;        <span class="hljs-comment">//除访问官方接口外 都必须加header头  </span><br>    <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">appid</span>: appid,<br>    <span class="hljs-attr">body</span>: body,<br>    <span class="hljs-attr">mch_id</span>: mch_id,<br>    <span class="hljs-attr">nonce_str</span>: nonce_str,<br>    <span class="hljs-attr">notify_url</span>: notify_url,<br>    <span class="hljs-attr">openid</span>: openid,<br>    <span class="hljs-attr">out_trade_no</span>: out_trade_no,<br>    <span class="hljs-attr">spbill_create_ip</span>: spbill_create_ip,<br>    <span class="hljs-attr">total_fee</span>: total_fee,<br>    <span class="hljs-attr">trade_type</span>: trade_type,<br>    <span class="hljs-attr">key</span>: key,<br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span> == <span class="hljs-number">10001</span>) &#123;<br>      app.<span class="hljs-title function_">getUserInfo</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>      <span class="hljs-keyword">var</span> sign = res.<span class="hljs-property">data</span><br>      <span class="hljs-keyword">var</span> formData = <span class="hljs-string">&quot;&lt;xml&gt;&quot;</span><br>      formData += <span class="hljs-string">&quot;&lt;appid&gt;&quot;</span> + appid + <span class="hljs-string">&quot;&lt;/appid&gt;&quot;</span> <span class="hljs-comment">//appid</span><br>      formData += <span class="hljs-string">&quot;&lt;body&gt;&quot;</span> + body + <span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>       <span class="hljs-comment">//标题</span><br>      formData += <span class="hljs-string">&quot;&lt;mch_id&gt;&quot;</span> + mch_id + <span class="hljs-string">&quot;&lt;/mch_id&gt;&quot;</span> <span class="hljs-comment">//商户号</span><br>      formData += <span class="hljs-string">&quot;&lt;nonce_str&gt;&quot;</span> + nonce_str + <span class="hljs-string">&quot;&lt;/nonce_str&gt;&quot;</span> <span class="hljs-comment">//随机字符串，不长于32位。</span><br>      formData += <span class="hljs-string">&quot;&lt;notify_url&gt;&quot;</span> + notify_url + <span class="hljs-string">&quot;&lt;/notify_url&gt;&quot;</span>   <span class="hljs-comment">//异步接收微信支付结果通知的回调地址,这个毁掉函数很重要，微信支付完成之后会将支付信息返回到这个地址中，我们可以在这个地址中验证支付签名，签名正确后可更改数据库的订单状态</span><br>      formData += <span class="hljs-string">&quot;&lt;openid&gt;&quot;</span> + openid + <span class="hljs-string">&quot;&lt;/openid&gt;&quot;</span>    <span class="hljs-comment">//用户Id</span><br>      formData += <span class="hljs-string">&quot;&lt;out_trade_no&gt;&quot;</span> + out_trade_no + <span class="hljs-string">&quot;&lt;/out_trade_no&gt;&quot;</span> <span class="hljs-comment">//商户订单号 保持订单号的唯一性 在回调函数中可根据订单号更改订单状态</span><br>      formData += <span class="hljs-string">&quot;&lt;spbill_create_ip&gt;&quot;</span> + spbill_create_ip + <span class="hljs-string">&quot;&lt;/spbill_create_ip&gt;&quot;</span><br>      formData += <span class="hljs-string">&quot;&lt;total_fee&gt;&quot;</span> + total_fee + <span class="hljs-string">&quot;&lt;/total_fee&gt;&quot;</span>  <span class="hljs-comment">//金额</span><br>      formData += <span class="hljs-string">&quot;&lt;trade_type&gt;&quot;</span> + trade_type + <span class="hljs-string">&quot;&lt;/trade_type&gt;&quot;</span>   <br>      formData += <span class="hljs-string">&quot;&lt;sign&gt;&quot;</span> + sign + <span class="hljs-string">&quot;&lt;/sign&gt;&quot;</span><span class="hljs-comment">//签名</span><br>      formData += <span class="hljs-string">&quot;&lt;/xml&gt;&quot;</span><br>     <span class="hljs-comment">//请求统一下单接口</span><br>      wx.<span class="hljs-title function_">request</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">data</span>: formData,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>          wx.<span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: requestUrl + <span class="hljs-string">&#x27;/wechat/junpin/toxml&#x27;</span>,    <span class="hljs-comment">// 将统一下单返回的xml数据返回后台转成json格式数据在返回前台 目的为获取里面的prepay_id</span><br>            <span class="hljs-attr">header</span>: &#123;<br>              <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">data</span>: &#123;<br>              <span class="hljs-attr">strXml</span>: res.<span class="hljs-property">data</span>,<br>            &#125;,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>              <span class="hljs-keyword">var</span> pk = <span class="hljs-string">&#x27;prepay_id=&#x27;</span> + res.<span class="hljs-property">data</span>.<span class="hljs-property">prepay_id</span>;<br>              <span class="hljs-keyword">var</span> timeStamp = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">toString</span>();<br>              timeStamp = timeStamp.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);   <span class="hljs-comment">//时间戳必须为十位时间戳</span><br>              <span class="hljs-comment">//获取支付签名，并支付</span><br>              that.<span class="hljs-title function_">signAgain</span>(appid, timeStamp, nonce_str, pk, <span class="hljs-string">&quot;MD5&quot;</span>, key);<br>            &#125;<br>          &#125;)<br>        &#125;<br>      &#125;)<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        wx.<span class="hljs-title function_">hideToast</span>()<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="进行二次签名-形成调用支付接口的签名参数-paySign"><a href="#进行二次签名-形成调用支付接口的签名参数-paySign" class="headerlink" title="进行二次签名 形成调用支付接口的签名参数 paySign"></a>进行二次签名 形成调用支付接口的签名参数 paySign</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">signAgain</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">appid, timeStamp, nonce_str, pk, signType, key</span>)<br>&#123;<br><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">var</span> sessionId = app.<span class="hljs-property">globalData</span>.<span class="hljs-property">sessionId</span><br><span class="hljs-keyword">var</span> order_id = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">order_id</span><br><span class="hljs-keyword">var</span> requestUrl = app.<span class="hljs-property">globalData</span>.<span class="hljs-property">request</span><br>wx.<span class="hljs-title function_">request</span>(&#123;<br>  <span class="hljs-attr">url</span>: requestUrl + <span class="hljs-string">&#x27;/wechat/junpin/signtwo&#x27;</span>,  <span class="hljs-comment">//二次签名</span><br>  <span class="hljs-attr">header</span>: &#123;<br>    <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">appId</span>: appid,<br>    <span class="hljs-attr">timeStamp</span>: timeStamp,<br>    <span class="hljs-attr">nonceStr</span>: nonce_str,<br>    <span class="hljs-attr">pk</span>: pk,   <span class="hljs-comment">//二次签名的时候参数名是package 这里是pk  在后台主义替换</span><br>    <span class="hljs-attr">signType</span>: signType,<br>    <span class="hljs-attr">key</span>: key,<br>  &#125;,<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>    <span class="hljs-keyword">var</span> paySign = res.<span class="hljs-property">data</span><br>    <span class="hljs-comment">//调用微信支付</span><br>    wx.<span class="hljs-title function_">requestPayment</span>(&#123;<br>      <span class="hljs-string">&#x27;appId&#x27;</span>: appid,    <span class="hljs-comment">//注意参数大小写  一定要和文档中的一模一样 这里为appId</span><br>      <span class="hljs-string">&#x27;timeStamp&#x27;</span>: timeStamp,<br>      <span class="hljs-string">&#x27;nonceStr&#x27;</span>: nonce_str,<br>      <span class="hljs-string">&#x27;package&#x27;</span>: pk,<br>      <span class="hljs-string">&#x27;signType&#x27;</span>: <span class="hljs-string">&#x27;MD5&#x27;</span>,   <span class="hljs-comment">//必须为MD5</span><br>      <span class="hljs-string">&#x27;paySign&#x27;</span>: paySign,<br>      <span class="hljs-string">&#x27;success&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        wx.<span class="hljs-title function_">request</span>(&#123;<br>          <span class="hljs-attr">url</span>: requestUrl + <span class="hljs-string">&#x27;/wechat/junpin/pay_sign&#x27;</span>, <span class="hljs-comment">//支付成功之后更改订单表订单状态</span><br>          <span class="hljs-attr">header</span>: &#123;<br>            <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>          &#125;,<br>          <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">order_id</span>: order_id,<br>          &#125;,<br>          <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>            <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span> == <span class="hljs-number">10001</span>) &#123;<br>              app.<span class="hljs-title function_">getUserInfo</span>()<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              wx.<span class="hljs-title function_">showToast</span>(&#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;支付成功&#x27;</span>,<br>                <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>                <span class="hljs-attr">duration</span>: <span class="hljs-number">6000</span><br>              &#125;)<br>              wx.<span class="hljs-title function_">redirectTo</span>(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/junpin/order/order?order_id=&#x27;</span>+order_id<br>              &#125;)<br>              <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                wx.<span class="hljs-title function_">hideToast</span>()<br>              &#125;, <span class="hljs-number">1000</span>);<br>            &#125;<br>          &#125;<br>        &#125;);<br>      &#125;,<br>      <span class="hljs-string">&#x27;fail&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fail&#x27;</span>);<br>      &#125;,<br>      <span class="hljs-string">&#x27;complete&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-comment">// console.log(res);</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;)&#125;<br></code></pre></td></tr></table></figure><h5 id="获取openId"><a href="#获取openId" class="headerlink" title="获取openId"></a>获取openId</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)<br>&#123;<br><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span><br>wx.<span class="hljs-title function_">login</span>(&#123;<br>  <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span>) &#123;<br>      <span class="hljs-comment">//发起网络请求    参数一定要拼在URL上</span><br>      wx.<span class="hljs-title function_">request</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://api.weixin.qq.com/sns/jscode2session?appid=wxaacf22345345cfc7162fe3&amp;secret=83ebd41c3e6f34a49b3a34578063434548ff3f71&amp;js_code=&#x27;</span> + res.<span class="hljs-property">code</span> + <span class="hljs-string">&#x27;&amp;grant_type=authorization_code&#x27;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>          that.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">openid</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">openid</span><br>          &#125;)<br>        &#125;<br>      &#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取用户登录态失败！&#x27;</span> + res.<span class="hljs-property">errMsg</span>)<br>    &#125;<br>  &#125;<br>&#125;);&#125;<br></code></pre></td></tr></table></figure><h5 id="后台签名直接调用函数"><a href="#后台签名直接调用函数" class="headerlink" title="后台签名直接调用函数"></a>后台签名直接调用函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ToUrlParams</span>(<span class="hljs-params">$attr</span>)&#123;   <span class="hljs-comment">//生成格式化的url</span><br>$buff = <span class="hljs-string">&quot;&quot;</span>;<br>foreach ($attr <span class="hljs-keyword">as</span> $k =&gt; $v)<br>&#123;<br>    <span class="hljs-keyword">if</span>($k != <span class="hljs-string">&quot;sign&quot;</span> &amp;&amp; $v != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; !<span class="hljs-title function_">is_array</span>($v))&#123;<br>        $buff .= $k . <span class="hljs-string">&quot;=&quot;</span> . $v . <span class="hljs-string">&quot;&amp;&quot;</span>;<br>    &#125;<br>&#125;<br>$buff = <span class="hljs-title function_">trim</span>($buff, <span class="hljs-string">&quot;&amp;&quot;</span>);<br><span class="hljs-keyword">return</span> $buff;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MakeSign</span>(<span class="hljs-params">$att,$key</span>)&#123;  <span class="hljs-comment">//签名步骤一：按字典序排序参数</span><br><span class="hljs-title function_">ksort</span>($att);<br>$string = <span class="hljs-title class_">ToUrlParams</span>($att);<br><span class="hljs-comment">//签名步骤二：在string后加入KEY</span><br>$string = $string . <span class="hljs-string">&quot;&amp;key=&quot;</span>.<span class="hljs-property">$key</span>;<br><span class="hljs-comment">//签名步骤三：MD5加密</span><br>$string = <span class="hljs-title function_">md5</span>($string);<br><span class="hljs-comment">//签名步骤四：所有字符转为大写</span><br>$result = <span class="hljs-title function_">strtoupper</span>($string);<br><span class="hljs-keyword">return</span> $result;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">FromXml</span>(<span class="hljs-params">$xml</span>)<br>&#123;     <span class="hljs-comment">//将xml转为array</span><br> <span class="hljs-keyword">if</span>(!$xml)<br> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WxPayException</span>(<span class="hljs-string">&quot;xml数据异常！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//将XML转为array</span><br>    <span class="hljs-comment">//禁止引用外部xml实体</span><br>    <span class="hljs-title function_">libxml_disable_entity_loader</span>(<span class="hljs-literal">true</span>);<br>    $values = <span class="hljs-title function_">json_decode</span>(<span class="hljs-title function_">json_encode</span>(<span class="hljs-title function_">simplexml_load_string</span>($xml, <span class="hljs-string">&#x27;SimpleXMLElement&#x27;</span>, <span class="hljs-variable constant_">LIBXML_NOCDATA</span>)), <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> $values;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="回调函数中的处理"><a href="#回调函数中的处理" class="headerlink" title="回调函数中的处理"></a>回调函数中的处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 收到微信支付成功通知，更改订单状态</span><br>public <span class="hljs-keyword">function</span> <span class="hljs-title function_">return_url</span>(<span class="hljs-params">Request $request</span>)<br>&#123;<br>    $xml = $GLOBALS[<span class="hljs-string">&#x27;HTTP_RAW_POST_DATA&#x27;</span>];<br>    $key = <span class="hljs-title class_">Config</span>::<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;app.wx_pay_key&#x27;</span>);      <br>    $arr = <span class="hljs-title class_">FromXml</span>($xml);<br>    $sign = $arr[<span class="hljs-string">&#x27;sign&#x27;</span>];<br>    $out_trade_no = $arr[<span class="hljs-string">&#x27;out_trade_no&#x27;</span>];  <span class="hljs-comment">//商户订单号  根据此订单号更改数据库订单状态</span><br>    <span class="hljs-title function_">unset</span>($arr[<span class="hljs-string">&#x27;sign&#x27;</span>]);<br>    $newSign = <span class="hljs-title class_">MakeSign</span>($arr,$key);<br>    <span class="hljs-keyword">if</span>($sign == $newSign)&#123;<br>      <span class="hljs-comment">//更改订单状态</span><br>      <span class="hljs-comment">//返回状态码</span><br>      $result[<span class="hljs-string">&#x27;return_code&#x27;</span>] = <span class="hljs-string">&#x27;SUCCESS&#x27;</span>;<br>      $result[<span class="hljs-string">&#x27;return_msg&#x27;</span>] = $msg;<br>      $result[<span class="hljs-string">&#x27;sign&#x27;</span>] = $this-&gt;<span class="hljs-title class_">MakeSign</span>($result);<br>      $result = $this-&gt;<span class="hljs-title class_">ToXml</span>($result);<br>      echo $result;    <span class="hljs-comment">//1： echo 输出  2：带上sign 值</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//将数组转化为xml格式字符串</span><br>public <span class="hljs-keyword">function</span> <span class="hljs-title function_">ToXml</span>(<span class="hljs-params">$result</span>)<br>&#123;<br>    $xml = <span class="hljs-string">&quot;&lt;xml&gt;&quot;</span>;<br>    foreach ($result <span class="hljs-keyword">as</span> $key=&gt;$val)<br>    &#123;<br>        $xml.=<span class="hljs-string">&quot;&lt;&quot;</span>.<span class="hljs-property">$key</span>.<span class="hljs-string">&quot;&gt;&lt;![CDATA[&quot;</span>.<span class="hljs-property">$val</span>.<span class="hljs-string">&quot;]]&gt;&lt;/&quot;</span>.<span class="hljs-property">$key</span>.<span class="hljs-string">&quot;&gt;&quot;</span>;<br>    &#125;<br>    $xml.=<span class="hljs-string">&quot;&lt;/xml&gt;&quot;</span>;<br>    <span class="hljs-keyword">return</span> $xml;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wechat Pay</tag>
      
      <tag>Wechat</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
